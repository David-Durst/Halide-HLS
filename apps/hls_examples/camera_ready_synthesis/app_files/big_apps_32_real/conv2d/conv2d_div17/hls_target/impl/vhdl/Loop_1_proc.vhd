-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_hw_input_stencil_stream_V_value_V_dout : IN STD_LOGIC_VECTOR (287 downto 0);
    p_hw_input_stencil_stream_V_value_V_empty_n : IN STD_LOGIC;
    p_hw_input_stencil_stream_V_value_V_read : OUT STD_LOGIC;
    hw_output_V_value_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    hw_output_V_value_V_ap_vld : OUT STD_LOGIC;
    hw_output_V_value_V_ap_ack : IN STD_LOGIC;
    hw_output_V_last_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    hw_output_V_last_V_ap_vld : OUT STD_LOGIC;
    hw_output_V_last_V_ap_ack : IN STD_LOGIC );
end;


architecture behav of Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv21_1F8C94 : STD_LOGIC_VECTOR (20 downto 0) := "111111000110010010100";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv11_77E : STD_LOGIC_VECTOR (10 downto 0) := "11101111110";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_435 : STD_LOGIC_VECTOR (10 downto 0) := "10000110101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011101";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111110";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111110";
    constant ap_const_lv11_77D : STD_LOGIC_VECTOR (10 downto 0) := "11101111101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv65_1E1E1E1E2 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000111100001111000011110000111100010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv28_FFFFFFF : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111111111111111";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_hw_input_stencil_stream_V_value_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal exitcond_flatten_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal hw_output_V_value_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter13_exitcond_flatten_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal hw_output_V_last_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_138 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_hw_output_y_scan_1_reg_149 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_x_scan_2_reg_161 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_flatten_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_sig_ioackin_hw_output_V_value_V_ap_ack : STD_LOGIC;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_flatten_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_flatten_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_flatten_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_exitcond_flatten_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_exitcond_flatten_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_exitcond_flatten_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_178_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond8_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond8_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond8_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_hw_output_x_scan_s_fu_190_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_x_scan_s_reg_534 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_x_scan_1_fu_198_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_y_scan_2_fu_204_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_y_scan_2_reg_544 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp5_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_reg_549 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp5_reg_549 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_hw_output_y_scan_s_fu_216_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_y_scan_s_reg_554 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_345_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_345_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_357_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_381_reg_569 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_393_reg_574 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_579 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_reg_584 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_reg_589 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_reg_pp0_iter2_tmp_6_reg_589 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_7_reg_594 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_pp0_iter2_tmp_7_reg_594 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_reg_599 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_604 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_1_reg_604 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid1_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid1_reg_609 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter3_tmp1_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter3_tmp3_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_last_V_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_last_V_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_tmp_last_V_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_tmp_last_V_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_tmp_last_V_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_tmp_last_V_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_tmp_last_V_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_tmp_last_V_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_tmp_last_V_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_tmp_last_V_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_397_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_397_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter5_p_397_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter6_p_397_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter7_p_397_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter8_p_397_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter9_p_397_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter10_p_397_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter11_p_397_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter12_p_397_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_tmp_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_tmp_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_tmp_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_tmp_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_tmp_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_413_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_reg_656 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_13_reg_661 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_reg_pp0_iter10_tmp_13_reg_661 : STD_LOGIC_VECTOR (27 downto 0);
    signal neg_mul_fu_429_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal neg_mul_reg_666 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_399_fu_463_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_399_reg_671 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter12_p_399_reg_671 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter13_p_399_reg_671 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_reg_678 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_401_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_401_reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal p_hw_output_y_scan_1_phi_fu_153_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal ap_reg_ioackin_hw_output_V_value_V_ap_ack : STD_LOGIC := '0';
    signal ap_reg_ioackin_hw_output_V_last_V_ap_ack : STD_LOGIC := '0';
    signal p_389_fu_331_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_353_fu_317_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_365_fu_324_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_371_fu_363_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_377_fu_370_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_377_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid2_fu_358_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_413_p0 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_12_fu_434_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_9_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_450_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_ti_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_493_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_402_cast_fu_500_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_14_fu_490_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_408_fu_508_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_413_ce : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component hls_target_mul_34fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (33 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;



begin
    hls_target_mul_34fYi_U18 : component hls_target_mul_34fYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 34,
        din1_WIDTH => 32,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_413_p0,
        din1 => p_397_reg_639,
        ce => grp_fu_413_ce,
        dout => grp_fu_413_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_hw_output_V_last_V_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp0_iter14) and (ap_const_lv1_0 = ap_reg_pp0_iter13_exitcond_flatten_reg_519))) then
                    if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_1 = hw_output_V_last_V_ap_ack))) then 
                        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_hw_output_V_value_V_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp0_iter14) and (ap_const_lv1_0 = ap_reg_pp0_iter13_exitcond_flatten_reg_519))) then
                    if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_1 = hw_output_V_value_V_ap_ack))) then 
                        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_172_p2))) then 
                indvar_flatten_reg_138 <= indvar_flatten_next_fu_178_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                indvar_flatten_reg_138 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    p_hw_output_x_scan_2_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_172_p2))) then 
                p_hw_output_x_scan_2_reg_161 <= p_hw_output_x_scan_1_fu_198_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                p_hw_output_x_scan_2_reg_161 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    p_hw_output_y_scan_1_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_519) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
                p_hw_output_y_scan_1_reg_149 <= p_hw_output_y_scan_s_reg_554;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                p_hw_output_y_scan_1_reg_149 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter10_exitcond_flatten_reg_519 <= ap_reg_pp0_iter9_exitcond_flatten_reg_519;
                ap_reg_pp0_iter10_p_397_reg_639 <= ap_reg_pp0_iter9_p_397_reg_639;
                ap_reg_pp0_iter10_tmp_13_reg_661 <= tmp_13_reg_661;
                ap_reg_pp0_iter10_tmp_last_V_reg_634 <= ap_reg_pp0_iter9_tmp_last_V_reg_634;
                ap_reg_pp0_iter10_tmp_reg_645 <= ap_reg_pp0_iter9_tmp_reg_645;
                ap_reg_pp0_iter11_exitcond_flatten_reg_519 <= ap_reg_pp0_iter10_exitcond_flatten_reg_519;
                ap_reg_pp0_iter11_p_397_reg_639 <= ap_reg_pp0_iter10_p_397_reg_639;
                ap_reg_pp0_iter11_tmp_last_V_reg_634 <= ap_reg_pp0_iter10_tmp_last_V_reg_634;
                ap_reg_pp0_iter12_exitcond_flatten_reg_519 <= ap_reg_pp0_iter11_exitcond_flatten_reg_519;
                ap_reg_pp0_iter12_p_397_reg_639 <= ap_reg_pp0_iter11_p_397_reg_639;
                ap_reg_pp0_iter12_p_399_reg_671 <= p_399_reg_671;
                ap_reg_pp0_iter12_tmp_last_V_reg_634 <= ap_reg_pp0_iter11_tmp_last_V_reg_634;
                ap_reg_pp0_iter13_exitcond_flatten_reg_519 <= ap_reg_pp0_iter12_exitcond_flatten_reg_519;
                ap_reg_pp0_iter13_p_399_reg_671 <= ap_reg_pp0_iter12_p_399_reg_671;
                ap_reg_pp0_iter13_tmp_last_V_reg_634 <= ap_reg_pp0_iter12_tmp_last_V_reg_634;
                ap_reg_pp0_iter2_exitcond8_reg_528 <= ap_reg_pp0_iter1_exitcond8_reg_528;
                ap_reg_pp0_iter2_exitcond_flatten_reg_519 <= ap_reg_pp0_iter1_exitcond_flatten_reg_519;
                ap_reg_pp0_iter2_tmp5_reg_549 <= tmp5_reg_549;
                ap_reg_pp0_iter2_tmp_1_reg_604 <= tmp_1_reg_604;
                ap_reg_pp0_iter2_tmp_6_reg_589 <= tmp_6_reg_589;
                ap_reg_pp0_iter2_tmp_7_reg_594 <= tmp_7_reg_594;
                ap_reg_pp0_iter3_exitcond_flatten_reg_519 <= ap_reg_pp0_iter2_exitcond_flatten_reg_519;
                ap_reg_pp0_iter3_tmp1_reg_619 <= tmp1_reg_619;
                ap_reg_pp0_iter3_tmp3_reg_624 <= tmp3_reg_624;
                ap_reg_pp0_iter4_exitcond_flatten_reg_519 <= ap_reg_pp0_iter3_exitcond_flatten_reg_519;
                ap_reg_pp0_iter4_tmp_last_V_reg_634 <= tmp_last_V_reg_634;
                ap_reg_pp0_iter5_exitcond_flatten_reg_519 <= ap_reg_pp0_iter4_exitcond_flatten_reg_519;
                ap_reg_pp0_iter5_p_397_reg_639 <= p_397_reg_639;
                ap_reg_pp0_iter5_tmp_last_V_reg_634 <= ap_reg_pp0_iter4_tmp_last_V_reg_634;
                ap_reg_pp0_iter5_tmp_reg_645 <= tmp_reg_645;
                ap_reg_pp0_iter6_exitcond_flatten_reg_519 <= ap_reg_pp0_iter5_exitcond_flatten_reg_519;
                ap_reg_pp0_iter6_p_397_reg_639 <= ap_reg_pp0_iter5_p_397_reg_639;
                ap_reg_pp0_iter6_tmp_last_V_reg_634 <= ap_reg_pp0_iter5_tmp_last_V_reg_634;
                ap_reg_pp0_iter6_tmp_reg_645 <= ap_reg_pp0_iter5_tmp_reg_645;
                ap_reg_pp0_iter7_exitcond_flatten_reg_519 <= ap_reg_pp0_iter6_exitcond_flatten_reg_519;
                ap_reg_pp0_iter7_p_397_reg_639 <= ap_reg_pp0_iter6_p_397_reg_639;
                ap_reg_pp0_iter7_tmp_last_V_reg_634 <= ap_reg_pp0_iter6_tmp_last_V_reg_634;
                ap_reg_pp0_iter7_tmp_reg_645 <= ap_reg_pp0_iter6_tmp_reg_645;
                ap_reg_pp0_iter8_exitcond_flatten_reg_519 <= ap_reg_pp0_iter7_exitcond_flatten_reg_519;
                ap_reg_pp0_iter8_p_397_reg_639 <= ap_reg_pp0_iter7_p_397_reg_639;
                ap_reg_pp0_iter8_tmp_last_V_reg_634 <= ap_reg_pp0_iter7_tmp_last_V_reg_634;
                ap_reg_pp0_iter8_tmp_reg_645 <= ap_reg_pp0_iter7_tmp_reg_645;
                ap_reg_pp0_iter9_exitcond_flatten_reg_519 <= ap_reg_pp0_iter8_exitcond_flatten_reg_519;
                ap_reg_pp0_iter9_p_397_reg_639 <= ap_reg_pp0_iter8_p_397_reg_639;
                ap_reg_pp0_iter9_tmp_last_V_reg_634 <= ap_reg_pp0_iter8_tmp_last_V_reg_634;
                ap_reg_pp0_iter9_tmp_reg_645 <= ap_reg_pp0_iter8_tmp_reg_645;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond8_reg_528 <= exitcond8_reg_528;
                ap_reg_pp0_iter1_exitcond_flatten_reg_519 <= exitcond_flatten_reg_519;
                exitcond_flatten_reg_519 <= exitcond_flatten_fu_172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_172_p2))) then
                exitcond8_reg_528 <= exitcond8_fu_184_p2;
                p_hw_output_x_scan_s_reg_534 <= p_hw_output_x_scan_s_fu_190_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter8_exitcond_flatten_reg_519))) then
                mul_reg_656 <= grp_fu_413_p2;
                tmp_13_reg_661 <= grp_fu_413_p2(64 downto 37);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter9_exitcond_flatten_reg_519) and (ap_const_lv1_1 = ap_reg_pp0_iter9_tmp_reg_645))) then
                neg_mul_reg_666 <= neg_mul_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_519 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                p_345_reg_559 <= p_345_fu_223_p1;
                p_357_reg_564 <= p_hw_input_stencil_stream_V_value_V_dout(95 downto 64);
                p_381_reg_569 <= p_hw_input_stencil_stream_V_value_V_dout(223 downto 192);
                p_393_reg_574 <= p_hw_input_stencil_stream_V_value_V_dout(287 downto 256);
                p_hw_output_y_scan_2_reg_544 <= p_hw_output_y_scan_2_fu_204_p2;
                tmp_1_reg_604 <= tmp_1_fu_307_p2;
                tmp_3_reg_579 <= p_hw_input_stencil_stream_V_value_V_dout(62 downto 32);
                tmp_5_reg_584 <= p_hw_input_stencil_stream_V_value_V_dout(126 downto 96);
                tmp_6_reg_589 <= p_hw_input_stencil_stream_V_value_V_dout(157 downto 128);
                tmp_7_reg_594 <= p_hw_input_stencil_stream_V_value_V_dout(190 downto 160);
                tmp_8_reg_599 <= p_hw_input_stencil_stream_V_value_V_dout(254 downto 224);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_519))) then
                p_397_reg_639 <= p_397_fu_397_p2;
                tmp_reg_645 <= p_397_fu_397_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_519))) then
                p_399_reg_671 <= p_399_fu_463_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter12_exitcond_flatten_reg_519))) then
                p_401_reg_683 <= p_401_fu_485_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_519 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                p_hw_output_y_scan_s_reg_554 <= p_hw_output_y_scan_s_fu_216_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter11_exitcond_flatten_reg_519))) then
                    p_neg_reg_678(31 downto 4) <= p_neg_fu_475_p2(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_519))) then
                tmp1_reg_619 <= tmp1_fu_343_p2;
                tmp3_reg_624 <= tmp3_fu_352_p2;
                tmp8_reg_614 <= tmp8_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_519 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond8_reg_528))) then
                tmp5_reg_549 <= tmp5_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_519))) then
                tmp7_reg_629 <= tmp7_fu_383_p2;
                tmp_last_V_reg_634 <= tmp_last_V_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_519) and (ap_reg_pp0_iter1_exitcond8_reg_528 = ap_const_lv1_1))) then
                tmp_mid1_reg_609 <= tmp_mid1_fu_312_p2;
            end if;
        end if;
    end process;
    p_neg_reg_678(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter14, exitcond_flatten_fu_172_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter14) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_172_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter14) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_172_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(2);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_519)
    begin
                ap_block_pp0_stage0_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_519 = ap_const_lv1_0) and (ap_const_logic_0 = p_hw_input_stencil_stream_V_value_V_empty_n));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_519, ap_enable_reg_pp0_iter14, ap_block_state16_io)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_519 = ap_const_lv1_0) and (ap_const_logic_0 = p_hw_input_stencil_stream_V_value_V_empty_n)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter14) and (ap_const_boolean_1 = ap_block_state16_io)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_519, ap_enable_reg_pp0_iter14, ap_block_state16_io)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_519 = ap_const_lv1_0) and (ap_const_logic_0 = p_hw_input_stencil_stream_V_value_V_empty_n)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter14) and (ap_const_boolean_1 = ap_block_state16_io)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_io_assign_proc : process(ap_reg_pp0_iter13_exitcond_flatten_reg_519, ap_sig_ioackin_hw_output_V_value_V_ap_ack)
    begin
                ap_block_state16_io <= ((ap_const_lv1_0 = ap_reg_pp0_iter13_exitcond_flatten_reg_519) and (ap_const_logic_0 = ap_sig_ioackin_hw_output_V_value_V_ap_ack));
    end process;

        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, exitcond_flatten_reg_519)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_flatten_reg_519 = ap_const_lv1_0) and (ap_const_logic_0 = p_hw_input_stencil_stream_V_value_V_empty_n));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_172_p2)
    begin
        if ((exitcond_flatten_fu_172_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12) and (ap_const_logic_0 = ap_enable_reg_pp0_iter13) and (ap_const_logic_0 = ap_enable_reg_pp0_iter14))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_hw_output_V_value_V_ap_ack_assign_proc : process(hw_output_V_value_V_ap_ack, ap_reg_ioackin_hw_output_V_value_V_ap_ack)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_hw_output_V_value_V_ap_ack)) then 
            ap_sig_ioackin_hw_output_V_value_V_ap_ack <= hw_output_V_value_V_ap_ack;
        else 
            ap_sig_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_1;
        end if; 
    end process;

    exitcond8_fu_184_p2 <= "1" when (p_hw_output_x_scan_2_reg_161 = ap_const_lv11_77E) else "0";
    exitcond_flatten_fu_172_p2 <= "1" when (indvar_flatten_reg_138 = ap_const_lv21_1F8C94) else "0";

    grp_fu_413_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_413_ce <= ap_const_logic_1;
        else 
            grp_fu_413_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_413_p0 <= ap_const_lv65_1E1E1E1E2(34 - 1 downto 0);
    hw_output_V_last_V <= ap_reg_pp0_iter13_tmp_last_V_reg_634;

    hw_output_V_last_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter14, ap_reg_pp0_iter13_exitcond_flatten_reg_519, ap_block_pp0_stage0_flag00001001, ap_reg_ioackin_hw_output_V_last_V_ap_ack)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter14) and (ap_const_lv1_0 = ap_reg_pp0_iter13_exitcond_flatten_reg_519) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_hw_output_V_last_V_ap_ack))) then 
            hw_output_V_last_V_ap_vld <= ap_const_logic_1;
        else 
            hw_output_V_last_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    hw_output_V_last_V_blk_n_assign_proc : process(hw_output_V_last_V_ap_ack, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter14, ap_reg_pp0_iter13_exitcond_flatten_reg_519)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter14) and (ap_const_lv1_0 = ap_reg_pp0_iter13_exitcond_flatten_reg_519))) then 
            hw_output_V_last_V_blk_n <= hw_output_V_last_V_ap_ack;
        else 
            hw_output_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        hw_output_V_value_V <= std_logic_vector(IEEE.numeric_std.resize(signed(p_408_fu_508_p2),32));


    hw_output_V_value_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter14, ap_reg_pp0_iter13_exitcond_flatten_reg_519, ap_block_pp0_stage0_flag00001001, ap_reg_ioackin_hw_output_V_value_V_ap_ack)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter14) and (ap_const_lv1_0 = ap_reg_pp0_iter13_exitcond_flatten_reg_519) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_hw_output_V_value_V_ap_ack))) then 
            hw_output_V_value_V_ap_vld <= ap_const_logic_1;
        else 
            hw_output_V_value_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    hw_output_V_value_V_blk_n_assign_proc : process(hw_output_V_value_V_ap_ack, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter14, ap_reg_pp0_iter13_exitcond_flatten_reg_519)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter14) and (ap_const_lv1_0 = ap_reg_pp0_iter13_exitcond_flatten_reg_519))) then 
            hw_output_V_value_V_blk_n <= hw_output_V_value_V_ap_ack;
        else 
            hw_output_V_value_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    indvar_flatten_next_fu_178_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_138) + unsigned(ap_const_lv21_1));
    neg_mul_fu_429_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_reg_656));
    neg_ti_fu_457_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_10_fu_450_p3));
    p_345_fu_223_p1 <= p_hw_input_stencil_stream_V_value_V_dout(32 - 1 downto 0);
    p_353_fu_317_p3 <= (tmp_3_reg_579 & ap_const_lv1_0);
    p_365_fu_324_p3 <= (tmp_5_reg_584 & ap_const_lv1_0);
    p_371_fu_363_p3 <= (ap_reg_pp0_iter2_tmp_6_reg_589 & ap_const_lv2_0);
    p_377_fu_370_p3 <= (ap_reg_pp0_iter2_tmp_7_reg_594 & ap_const_lv1_0);
    p_389_fu_331_p3 <= (tmp_8_reg_599 & ap_const_lv1_0);
    p_397_fu_397_p2 <= std_logic_vector(unsigned(tmp7_reg_629) + unsigned(tmp4_fu_393_p2));
    p_399_fu_463_p3 <= 
        neg_ti_fu_457_p2 when (ap_reg_pp0_iter10_tmp_reg_645(0) = '1') else 
        tmp_4_fu_447_p1;
    p_401_fu_485_p2 <= std_logic_vector(unsigned(ap_reg_pp0_iter12_p_397_reg_639) + unsigned(tmp_s_fu_481_p2));
    p_402_cast_fu_500_p3 <= 
        ap_const_lv28_FFFFFFF when (tmp_16_fu_493_p3(0) = '1') else 
        ap_const_lv28_0;
    p_408_fu_508_p2 <= std_logic_vector(unsigned(p_402_cast_fu_500_p3) + unsigned(tmp_14_fu_490_p1));

    p_hw_input_stencil_stream_V_value_V_blk_n_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond_flatten_reg_519)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_519 = ap_const_lv1_0))) then 
            p_hw_input_stencil_stream_V_value_V_blk_n <= p_hw_input_stencil_stream_V_value_V_empty_n;
        else 
            p_hw_input_stencil_stream_V_value_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_hw_input_stencil_stream_V_value_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_519, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_519 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            p_hw_input_stencil_stream_V_value_V_read <= ap_const_logic_1;
        else 
            p_hw_input_stencil_stream_V_value_V_read <= ap_const_logic_0;
        end if; 
    end process;

    p_hw_output_x_scan_1_fu_198_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(p_hw_output_x_scan_s_fu_190_p3));
    p_hw_output_x_scan_s_fu_190_p3 <= 
        ap_const_lv11_0 when (exitcond8_fu_184_p2(0) = '1') else 
        p_hw_output_x_scan_2_reg_161;

    p_hw_output_y_scan_1_phi_fu_153_p4_assign_proc : process(ap_block_pp0_stage0_flag00000000, p_hw_output_y_scan_1_reg_149, ap_reg_pp0_iter1_exitcond_flatten_reg_519, p_hw_output_y_scan_s_reg_554, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_519) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            p_hw_output_y_scan_1_phi_fu_153_p4 <= p_hw_output_y_scan_s_reg_554;
        else 
            p_hw_output_y_scan_1_phi_fu_153_p4 <= p_hw_output_y_scan_1_reg_149;
        end if; 
    end process;

    p_hw_output_y_scan_2_fu_204_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(p_hw_output_y_scan_1_phi_fu_153_p4));
    p_hw_output_y_scan_s_fu_216_p3 <= 
        p_hw_output_y_scan_2_fu_204_p2 when (exitcond8_reg_528(0) = '1') else 
        p_hw_output_y_scan_1_phi_fu_153_p4;
    p_neg_fu_475_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_15_fu_470_p2));
    tmp1_fu_343_p2 <= std_logic_vector(unsigned(p_353_fu_317_p3) + unsigned(p_345_reg_559));
    tmp2_fu_348_p2 <= std_logic_vector(unsigned(p_393_reg_574) + unsigned(p_357_reg_564));
    tmp3_fu_352_p2 <= std_logic_vector(unsigned(p_365_fu_324_p3) + unsigned(tmp2_fu_348_p2));
    tmp4_fu_393_p2 <= std_logic_vector(unsigned(ap_reg_pp0_iter3_tmp1_reg_619) + unsigned(ap_reg_pp0_iter3_tmp3_reg_624));
    tmp5_fu_210_p2 <= "1" when (p_hw_output_y_scan_1_phi_fu_153_p4 = ap_const_lv11_435) else "0";
    tmp7_fu_383_p2 <= std_logic_vector(unsigned(tmp8_reg_614) + unsigned(tmp9_fu_377_p2));
    tmp8_fu_338_p2 <= std_logic_vector(unsigned(p_389_fu_331_p3) + unsigned(p_381_reg_569));
    tmp9_fu_377_p2 <= std_logic_vector(unsigned(p_371_fu_363_p3) + unsigned(p_377_fu_370_p3));
    tmp_10_fu_450_p3 <= 
        tmp_9_fu_443_p1 when (ap_reg_pp0_iter10_tmp_reg_645(0) = '1') else 
        tmp_4_fu_447_p1;
    tmp_12_fu_434_p4 <= neg_mul_reg_666(64 downto 37);
    tmp_14_fu_490_p1 <= ap_reg_pp0_iter13_p_399_reg_671(28 - 1 downto 0);
    tmp_15_fu_470_p2 <= std_logic_vector(shift_left(unsigned(p_399_reg_671),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    tmp_16_fu_493_p3 <= p_401_reg_683(31 downto 31);
    tmp_1_fu_307_p2 <= "1" when (p_hw_output_x_scan_s_reg_534 = ap_const_lv11_77D) else "0";
        tmp_4_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_reg_pp0_iter10_tmp_13_reg_661),32));

        tmp_9_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_434_p4),32));

    tmp_last_V_fu_388_p2 <= (ap_reg_pp0_iter2_tmp_1_reg_604 and tmp_mid2_fu_358_p3);
    tmp_mid1_fu_312_p2 <= "1" when (p_hw_output_y_scan_2_reg_544 = ap_const_lv11_435) else "0";
    tmp_mid2_fu_358_p3 <= 
        tmp_mid1_reg_609 when (ap_reg_pp0_iter2_exitcond8_reg_528(0) = '1') else 
        ap_reg_pp0_iter2_tmp5_reg_549;
    tmp_s_fu_481_p2 <= std_logic_vector(unsigned(p_neg_reg_678) - unsigned(ap_reg_pp0_iter12_p_399_reg_671));
end behav;
