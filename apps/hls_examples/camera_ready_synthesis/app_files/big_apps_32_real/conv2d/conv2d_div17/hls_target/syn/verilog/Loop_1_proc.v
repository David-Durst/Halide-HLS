// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_hw_input_stencil_stream_V_value_V_dout,
        p_hw_input_stencil_stream_V_value_V_empty_n,
        p_hw_input_stencil_stream_V_value_V_read,
        hw_output_V_value_V,
        hw_output_V_value_V_ap_vld,
        hw_output_V_value_V_ap_ack,
        hw_output_V_last_V,
        hw_output_V_last_V_ap_vld,
        hw_output_V_last_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state17 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [287:0] p_hw_input_stencil_stream_V_value_V_dout;
input   p_hw_input_stencil_stream_V_value_V_empty_n;
output   p_hw_input_stencil_stream_V_value_V_read;
output  [31:0] hw_output_V_value_V;
output   hw_output_V_value_V_ap_vld;
input   hw_output_V_value_V_ap_ack;
output  [0:0] hw_output_V_last_V;
output   hw_output_V_last_V_ap_vld;
input   hw_output_V_last_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_hw_input_stencil_stream_V_value_V_read;
reg hw_output_V_value_V_ap_vld;
reg hw_output_V_last_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_hw_input_stencil_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_519;
reg    hw_output_V_value_V_blk_n;
reg    ap_enable_reg_pp0_iter14;
reg   [0:0] ap_reg_pp0_iter13_exitcond_flatten_reg_519;
reg    hw_output_V_last_V_blk_n;
reg   [20:0] indvar_flatten_reg_138;
reg   [10:0] p_hw_output_y_scan_1_reg_149;
reg   [10:0] p_hw_output_x_scan_2_reg_161;
wire   [0:0] exitcond_flatten_fu_172_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
reg    ap_sig_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_block_state16_io;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_519;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_519;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_519;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_519;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten_reg_519;
reg   [0:0] ap_reg_pp0_iter6_exitcond_flatten_reg_519;
reg   [0:0] ap_reg_pp0_iter7_exitcond_flatten_reg_519;
reg   [0:0] ap_reg_pp0_iter8_exitcond_flatten_reg_519;
reg   [0:0] ap_reg_pp0_iter9_exitcond_flatten_reg_519;
reg   [0:0] ap_reg_pp0_iter10_exitcond_flatten_reg_519;
reg   [0:0] ap_reg_pp0_iter11_exitcond_flatten_reg_519;
reg   [0:0] ap_reg_pp0_iter12_exitcond_flatten_reg_519;
wire   [20:0] indvar_flatten_next_fu_178_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond8_fu_184_p2;
reg   [0:0] exitcond8_reg_528;
reg   [0:0] ap_reg_pp0_iter1_exitcond8_reg_528;
reg   [0:0] ap_reg_pp0_iter2_exitcond8_reg_528;
wire   [10:0] p_hw_output_x_scan_s_fu_190_p3;
reg   [10:0] p_hw_output_x_scan_s_reg_534;
wire   [10:0] p_hw_output_x_scan_1_fu_198_p2;
wire   [10:0] p_hw_output_y_scan_2_fu_204_p2;
reg   [10:0] p_hw_output_y_scan_2_reg_544;
wire   [0:0] tmp5_fu_210_p2;
reg   [0:0] tmp5_reg_549;
reg   [0:0] ap_reg_pp0_iter2_tmp5_reg_549;
wire   [10:0] p_hw_output_y_scan_s_fu_216_p3;
reg   [10:0] p_hw_output_y_scan_s_reg_554;
wire   [31:0] p_345_fu_223_p1;
reg   [31:0] p_345_reg_559;
reg   [31:0] p_357_reg_564;
reg   [31:0] p_381_reg_569;
reg   [31:0] p_393_reg_574;
reg   [30:0] tmp_3_reg_579;
reg   [30:0] tmp_5_reg_584;
reg   [29:0] tmp_6_reg_589;
reg   [29:0] ap_reg_pp0_iter2_tmp_6_reg_589;
reg   [30:0] tmp_7_reg_594;
reg   [30:0] ap_reg_pp0_iter2_tmp_7_reg_594;
reg   [30:0] tmp_8_reg_599;
wire   [0:0] tmp_1_fu_307_p2;
reg   [0:0] tmp_1_reg_604;
reg   [0:0] ap_reg_pp0_iter2_tmp_1_reg_604;
wire   [0:0] tmp_mid1_fu_312_p2;
reg   [0:0] tmp_mid1_reg_609;
wire   [31:0] tmp8_fu_338_p2;
reg   [31:0] tmp8_reg_614;
wire   [31:0] tmp1_fu_343_p2;
reg   [31:0] tmp1_reg_619;
reg   [31:0] ap_reg_pp0_iter3_tmp1_reg_619;
wire   [31:0] tmp3_fu_352_p2;
reg   [31:0] tmp3_reg_624;
reg   [31:0] ap_reg_pp0_iter3_tmp3_reg_624;
wire   [31:0] tmp7_fu_383_p2;
reg   [31:0] tmp7_reg_629;
wire   [0:0] tmp_last_V_fu_388_p2;
reg   [0:0] tmp_last_V_reg_634;
reg   [0:0] ap_reg_pp0_iter4_tmp_last_V_reg_634;
reg   [0:0] ap_reg_pp0_iter5_tmp_last_V_reg_634;
reg   [0:0] ap_reg_pp0_iter6_tmp_last_V_reg_634;
reg   [0:0] ap_reg_pp0_iter7_tmp_last_V_reg_634;
reg   [0:0] ap_reg_pp0_iter8_tmp_last_V_reg_634;
reg   [0:0] ap_reg_pp0_iter9_tmp_last_V_reg_634;
reg   [0:0] ap_reg_pp0_iter10_tmp_last_V_reg_634;
reg   [0:0] ap_reg_pp0_iter11_tmp_last_V_reg_634;
reg   [0:0] ap_reg_pp0_iter12_tmp_last_V_reg_634;
reg   [0:0] ap_reg_pp0_iter13_tmp_last_V_reg_634;
wire   [31:0] p_397_fu_397_p2;
reg  signed [31:0] p_397_reg_639;
reg   [31:0] ap_reg_pp0_iter5_p_397_reg_639;
reg   [31:0] ap_reg_pp0_iter6_p_397_reg_639;
reg   [31:0] ap_reg_pp0_iter7_p_397_reg_639;
reg   [31:0] ap_reg_pp0_iter8_p_397_reg_639;
reg   [31:0] ap_reg_pp0_iter9_p_397_reg_639;
reg   [31:0] ap_reg_pp0_iter10_p_397_reg_639;
reg   [31:0] ap_reg_pp0_iter11_p_397_reg_639;
reg   [31:0] ap_reg_pp0_iter12_p_397_reg_639;
reg   [0:0] tmp_reg_645;
reg   [0:0] ap_reg_pp0_iter5_tmp_reg_645;
reg   [0:0] ap_reg_pp0_iter6_tmp_reg_645;
reg   [0:0] ap_reg_pp0_iter7_tmp_reg_645;
reg   [0:0] ap_reg_pp0_iter8_tmp_reg_645;
reg   [0:0] ap_reg_pp0_iter9_tmp_reg_645;
reg   [0:0] ap_reg_pp0_iter10_tmp_reg_645;
wire   [64:0] grp_fu_413_p2;
reg   [64:0] mul_reg_656;
reg   [27:0] tmp_13_reg_661;
reg   [27:0] ap_reg_pp0_iter10_tmp_13_reg_661;
wire   [64:0] neg_mul_fu_429_p2;
reg   [64:0] neg_mul_reg_666;
wire   [31:0] p_399_fu_463_p3;
reg   [31:0] p_399_reg_671;
reg   [31:0] ap_reg_pp0_iter12_p_399_reg_671;
reg   [31:0] ap_reg_pp0_iter13_p_399_reg_671;
wire   [31:0] p_neg_fu_475_p2;
reg   [31:0] p_neg_reg_678;
wire   [31:0] p_401_fu_485_p2;
reg   [31:0] p_401_reg_683;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg   [10:0] p_hw_output_y_scan_1_phi_fu_153_p4;
reg    ap_block_pp0_stage0_flag00001001;
reg    ap_reg_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_reg_ioackin_hw_output_V_last_V_ap_ack;
wire   [31:0] p_389_fu_331_p3;
wire   [31:0] p_353_fu_317_p3;
wire   [31:0] p_365_fu_324_p3;
wire   [31:0] tmp2_fu_348_p2;
wire   [31:0] p_371_fu_363_p3;
wire   [31:0] p_377_fu_370_p3;
wire   [31:0] tmp9_fu_377_p2;
wire   [0:0] tmp_mid2_fu_358_p3;
wire   [31:0] tmp4_fu_393_p2;
wire   [33:0] grp_fu_413_p0;
wire   [27:0] tmp_12_fu_434_p4;
wire  signed [31:0] tmp_9_fu_443_p1;
wire  signed [31:0] tmp_4_fu_447_p1;
wire   [31:0] tmp_10_fu_450_p3;
wire   [31:0] neg_ti_fu_457_p2;
wire   [31:0] tmp_15_fu_470_p2;
wire   [31:0] tmp_s_fu_481_p2;
wire   [0:0] tmp_16_fu_493_p3;
wire   [27:0] p_402_cast_fu_500_p3;
wire   [27:0] tmp_14_fu_490_p1;
wire   [27:0] p_408_fu_508_p2;
reg    grp_fu_413_ce;
wire    ap_CS_fsm_state17;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_reg_ioackin_hw_output_V_value_V_ap_ack = 1'b0;
#0 ap_reg_ioackin_hw_output_V_last_V_ap_ack = 1'b0;
end

hls_target_mul_34fYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 34 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 65 ))
hls_target_mul_34fYi_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_413_p0),
    .din1(p_397_reg_639),
    .ce(grp_fu_413_ce),
    .dout(grp_fu_413_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter14 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter14) & (1'd0 == ap_reg_pp0_iter13_exitcond_flatten_reg_519))) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == hw_output_V_last_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter14) & (1'd0 == ap_reg_pp0_iter13_exitcond_flatten_reg_519))) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == hw_output_V_value_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_172_p2))) begin
        indvar_flatten_reg_138 <= indvar_flatten_next_fu_178_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_138 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_172_p2))) begin
        p_hw_output_x_scan_2_reg_161 <= p_hw_output_x_scan_1_fu_198_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        p_hw_output_x_scan_2_reg_161 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_519) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        p_hw_output_y_scan_1_reg_149 <= p_hw_output_y_scan_s_reg_554;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        p_hw_output_y_scan_1_reg_149 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter10_exitcond_flatten_reg_519 <= ap_reg_pp0_iter9_exitcond_flatten_reg_519;
        ap_reg_pp0_iter10_p_397_reg_639 <= ap_reg_pp0_iter9_p_397_reg_639;
        ap_reg_pp0_iter10_tmp_13_reg_661 <= tmp_13_reg_661;
        ap_reg_pp0_iter10_tmp_last_V_reg_634 <= ap_reg_pp0_iter9_tmp_last_V_reg_634;
        ap_reg_pp0_iter10_tmp_reg_645 <= ap_reg_pp0_iter9_tmp_reg_645;
        ap_reg_pp0_iter11_exitcond_flatten_reg_519 <= ap_reg_pp0_iter10_exitcond_flatten_reg_519;
        ap_reg_pp0_iter11_p_397_reg_639 <= ap_reg_pp0_iter10_p_397_reg_639;
        ap_reg_pp0_iter11_tmp_last_V_reg_634 <= ap_reg_pp0_iter10_tmp_last_V_reg_634;
        ap_reg_pp0_iter12_exitcond_flatten_reg_519 <= ap_reg_pp0_iter11_exitcond_flatten_reg_519;
        ap_reg_pp0_iter12_p_397_reg_639 <= ap_reg_pp0_iter11_p_397_reg_639;
        ap_reg_pp0_iter12_p_399_reg_671 <= p_399_reg_671;
        ap_reg_pp0_iter12_tmp_last_V_reg_634 <= ap_reg_pp0_iter11_tmp_last_V_reg_634;
        ap_reg_pp0_iter13_exitcond_flatten_reg_519 <= ap_reg_pp0_iter12_exitcond_flatten_reg_519;
        ap_reg_pp0_iter13_p_399_reg_671 <= ap_reg_pp0_iter12_p_399_reg_671;
        ap_reg_pp0_iter13_tmp_last_V_reg_634 <= ap_reg_pp0_iter12_tmp_last_V_reg_634;
        ap_reg_pp0_iter2_exitcond8_reg_528 <= ap_reg_pp0_iter1_exitcond8_reg_528;
        ap_reg_pp0_iter2_exitcond_flatten_reg_519 <= ap_reg_pp0_iter1_exitcond_flatten_reg_519;
        ap_reg_pp0_iter2_tmp5_reg_549 <= tmp5_reg_549;
        ap_reg_pp0_iter2_tmp_1_reg_604 <= tmp_1_reg_604;
        ap_reg_pp0_iter2_tmp_6_reg_589 <= tmp_6_reg_589;
        ap_reg_pp0_iter2_tmp_7_reg_594 <= tmp_7_reg_594;
        ap_reg_pp0_iter3_exitcond_flatten_reg_519 <= ap_reg_pp0_iter2_exitcond_flatten_reg_519;
        ap_reg_pp0_iter3_tmp1_reg_619 <= tmp1_reg_619;
        ap_reg_pp0_iter3_tmp3_reg_624 <= tmp3_reg_624;
        ap_reg_pp0_iter4_exitcond_flatten_reg_519 <= ap_reg_pp0_iter3_exitcond_flatten_reg_519;
        ap_reg_pp0_iter4_tmp_last_V_reg_634 <= tmp_last_V_reg_634;
        ap_reg_pp0_iter5_exitcond_flatten_reg_519 <= ap_reg_pp0_iter4_exitcond_flatten_reg_519;
        ap_reg_pp0_iter5_p_397_reg_639 <= p_397_reg_639;
        ap_reg_pp0_iter5_tmp_last_V_reg_634 <= ap_reg_pp0_iter4_tmp_last_V_reg_634;
        ap_reg_pp0_iter5_tmp_reg_645 <= tmp_reg_645;
        ap_reg_pp0_iter6_exitcond_flatten_reg_519 <= ap_reg_pp0_iter5_exitcond_flatten_reg_519;
        ap_reg_pp0_iter6_p_397_reg_639 <= ap_reg_pp0_iter5_p_397_reg_639;
        ap_reg_pp0_iter6_tmp_last_V_reg_634 <= ap_reg_pp0_iter5_tmp_last_V_reg_634;
        ap_reg_pp0_iter6_tmp_reg_645 <= ap_reg_pp0_iter5_tmp_reg_645;
        ap_reg_pp0_iter7_exitcond_flatten_reg_519 <= ap_reg_pp0_iter6_exitcond_flatten_reg_519;
        ap_reg_pp0_iter7_p_397_reg_639 <= ap_reg_pp0_iter6_p_397_reg_639;
        ap_reg_pp0_iter7_tmp_last_V_reg_634 <= ap_reg_pp0_iter6_tmp_last_V_reg_634;
        ap_reg_pp0_iter7_tmp_reg_645 <= ap_reg_pp0_iter6_tmp_reg_645;
        ap_reg_pp0_iter8_exitcond_flatten_reg_519 <= ap_reg_pp0_iter7_exitcond_flatten_reg_519;
        ap_reg_pp0_iter8_p_397_reg_639 <= ap_reg_pp0_iter7_p_397_reg_639;
        ap_reg_pp0_iter8_tmp_last_V_reg_634 <= ap_reg_pp0_iter7_tmp_last_V_reg_634;
        ap_reg_pp0_iter8_tmp_reg_645 <= ap_reg_pp0_iter7_tmp_reg_645;
        ap_reg_pp0_iter9_exitcond_flatten_reg_519 <= ap_reg_pp0_iter8_exitcond_flatten_reg_519;
        ap_reg_pp0_iter9_p_397_reg_639 <= ap_reg_pp0_iter8_p_397_reg_639;
        ap_reg_pp0_iter9_tmp_last_V_reg_634 <= ap_reg_pp0_iter8_tmp_last_V_reg_634;
        ap_reg_pp0_iter9_tmp_reg_645 <= ap_reg_pp0_iter8_tmp_reg_645;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond8_reg_528 <= exitcond8_reg_528;
        ap_reg_pp0_iter1_exitcond_flatten_reg_519 <= exitcond_flatten_reg_519;
        exitcond_flatten_reg_519 <= exitcond_flatten_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_172_p2))) begin
        exitcond8_reg_528 <= exitcond8_fu_184_p2;
        p_hw_output_x_scan_s_reg_534 <= p_hw_output_x_scan_s_fu_190_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter8_exitcond_flatten_reg_519))) begin
        mul_reg_656 <= grp_fu_413_p2;
        tmp_13_reg_661 <= {{grp_fu_413_p2[64:37]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter9_exitcond_flatten_reg_519) & (1'd1 == ap_reg_pp0_iter9_tmp_reg_645))) begin
        neg_mul_reg_666 <= neg_mul_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_519 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_345_reg_559 <= p_345_fu_223_p1;
        p_357_reg_564 <= {{p_hw_input_stencil_stream_V_value_V_dout[95:64]}};
        p_381_reg_569 <= {{p_hw_input_stencil_stream_V_value_V_dout[223:192]}};
        p_393_reg_574 <= {{p_hw_input_stencil_stream_V_value_V_dout[287:256]}};
        p_hw_output_y_scan_2_reg_544 <= p_hw_output_y_scan_2_fu_204_p2;
        tmp_1_reg_604 <= tmp_1_fu_307_p2;
        tmp_3_reg_579 <= {{p_hw_input_stencil_stream_V_value_V_dout[62:32]}};
        tmp_5_reg_584 <= {{p_hw_input_stencil_stream_V_value_V_dout[126:96]}};
        tmp_6_reg_589 <= {{p_hw_input_stencil_stream_V_value_V_dout[157:128]}};
        tmp_7_reg_594 <= {{p_hw_input_stencil_stream_V_value_V_dout[190:160]}};
        tmp_8_reg_599 <= {{p_hw_input_stencil_stream_V_value_V_dout[254:224]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_519))) begin
        p_397_reg_639 <= p_397_fu_397_p2;
        tmp_reg_645 <= p_397_fu_397_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter10_exitcond_flatten_reg_519))) begin
        p_399_reg_671 <= p_399_fu_463_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter12_exitcond_flatten_reg_519))) begin
        p_401_reg_683 <= p_401_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_519 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_output_y_scan_s_reg_554 <= p_hw_output_y_scan_s_fu_216_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter11_exitcond_flatten_reg_519))) begin
        p_neg_reg_678[31 : 4] <= p_neg_fu_475_p2[31 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_519))) begin
        tmp1_reg_619 <= tmp1_fu_343_p2;
        tmp3_reg_624 <= tmp3_fu_352_p2;
        tmp8_reg_614 <= tmp8_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_519 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond8_reg_528))) begin
        tmp5_reg_549 <= tmp5_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_519))) begin
        tmp7_reg_629 <= tmp7_fu_383_p2;
        tmp_last_V_reg_634 <= tmp_last_V_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_519) & (ap_reg_pp0_iter1_exitcond8_reg_528 == 1'd1))) begin
        tmp_mid1_reg_609 <= tmp_mid1_fu_312_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_172_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_enable_reg_pp0_iter10) & (1'b0 == ap_enable_reg_pp0_iter11) & (1'b0 == ap_enable_reg_pp0_iter12) & (1'b0 == ap_enable_reg_pp0_iter13) & (1'b0 == ap_enable_reg_pp0_iter14))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack)) begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = hw_output_V_value_V_ap_ack;
    end else begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        grp_fu_413_ce = 1'b1;
    end else begin
        grp_fu_413_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter14) & (1'd0 == ap_reg_pp0_iter13_exitcond_flatten_reg_519) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_hw_output_V_last_V_ap_ack))) begin
        hw_output_V_last_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_last_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter14) & (1'd0 == ap_reg_pp0_iter13_exitcond_flatten_reg_519))) begin
        hw_output_V_last_V_blk_n = hw_output_V_last_V_ap_ack;
    end else begin
        hw_output_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter14) & (1'd0 == ap_reg_pp0_iter13_exitcond_flatten_reg_519) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack))) begin
        hw_output_V_value_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_value_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter14) & (1'd0 == ap_reg_pp0_iter13_exitcond_flatten_reg_519))) begin
        hw_output_V_value_V_blk_n = hw_output_V_value_V_ap_ack;
    end else begin
        hw_output_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_519 == 1'd0))) begin
        p_hw_input_stencil_stream_V_value_V_blk_n = p_hw_input_stencil_stream_V_value_V_empty_n;
    end else begin
        p_hw_input_stencil_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_519 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_input_stencil_stream_V_value_V_read = 1'b1;
    end else begin
        p_hw_input_stencil_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_519) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        p_hw_output_y_scan_1_phi_fu_153_p4 = p_hw_output_y_scan_s_reg_554;
    end else begin
        p_hw_output_y_scan_1_phi_fu_153_p4 = p_hw_output_y_scan_1_reg_149;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter14) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_172_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter14) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_172_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_519 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_519 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter14) & (1'b1 == ap_block_state16_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_519 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter14) & (1'b1 == ap_block_state16_io)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((1'd0 == ap_reg_pp0_iter13_exitcond_flatten_reg_519) & (1'b0 == ap_sig_ioackin_hw_output_V_value_V_ap_ack));
end

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten_reg_519 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond8_fu_184_p2 = ((p_hw_output_x_scan_2_reg_161 == 11'd1918) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_172_p2 = ((indvar_flatten_reg_138 == 21'd2067604) ? 1'b1 : 1'b0);

assign grp_fu_413_p0 = 65'd8084644322;

assign hw_output_V_last_V = ap_reg_pp0_iter13_tmp_last_V_reg_634;

assign hw_output_V_value_V = $signed(p_408_fu_508_p2);

assign indvar_flatten_next_fu_178_p2 = (indvar_flatten_reg_138 + 21'd1);

assign neg_mul_fu_429_p2 = (65'd0 - mul_reg_656);

assign neg_ti_fu_457_p2 = (32'd0 - tmp_10_fu_450_p3);

assign p_345_fu_223_p1 = p_hw_input_stencil_stream_V_value_V_dout[31:0];

assign p_353_fu_317_p3 = {{tmp_3_reg_579}, {1'd0}};

assign p_365_fu_324_p3 = {{tmp_5_reg_584}, {1'd0}};

assign p_371_fu_363_p3 = {{ap_reg_pp0_iter2_tmp_6_reg_589}, {2'd0}};

assign p_377_fu_370_p3 = {{ap_reg_pp0_iter2_tmp_7_reg_594}, {1'd0}};

assign p_389_fu_331_p3 = {{tmp_8_reg_599}, {1'd0}};

assign p_397_fu_397_p2 = (tmp7_reg_629 + tmp4_fu_393_p2);

assign p_399_fu_463_p3 = ((ap_reg_pp0_iter10_tmp_reg_645[0:0] === 1'b1) ? neg_ti_fu_457_p2 : tmp_4_fu_447_p1);

assign p_401_fu_485_p2 = (ap_reg_pp0_iter12_p_397_reg_639 + tmp_s_fu_481_p2);

assign p_402_cast_fu_500_p3 = ((tmp_16_fu_493_p3[0:0] === 1'b1) ? 28'd268435455 : 28'd0);

assign p_408_fu_508_p2 = (p_402_cast_fu_500_p3 + tmp_14_fu_490_p1);

assign p_hw_output_x_scan_1_fu_198_p2 = (11'd1 + p_hw_output_x_scan_s_fu_190_p3);

assign p_hw_output_x_scan_s_fu_190_p3 = ((exitcond8_fu_184_p2[0:0] === 1'b1) ? 11'd0 : p_hw_output_x_scan_2_reg_161);

assign p_hw_output_y_scan_2_fu_204_p2 = (11'd1 + p_hw_output_y_scan_1_phi_fu_153_p4);

assign p_hw_output_y_scan_s_fu_216_p3 = ((exitcond8_reg_528[0:0] === 1'b1) ? p_hw_output_y_scan_2_fu_204_p2 : p_hw_output_y_scan_1_phi_fu_153_p4);

assign p_neg_fu_475_p2 = (32'd0 - tmp_15_fu_470_p2);

assign tmp1_fu_343_p2 = (p_353_fu_317_p3 + p_345_reg_559);

assign tmp2_fu_348_p2 = (p_393_reg_574 + p_357_reg_564);

assign tmp3_fu_352_p2 = (p_365_fu_324_p3 + tmp2_fu_348_p2);

assign tmp4_fu_393_p2 = (ap_reg_pp0_iter3_tmp1_reg_619 + ap_reg_pp0_iter3_tmp3_reg_624);

assign tmp5_fu_210_p2 = ((p_hw_output_y_scan_1_phi_fu_153_p4 == 11'd1077) ? 1'b1 : 1'b0);

assign tmp7_fu_383_p2 = (tmp8_reg_614 + tmp9_fu_377_p2);

assign tmp8_fu_338_p2 = (p_389_fu_331_p3 + p_381_reg_569);

assign tmp9_fu_377_p2 = (p_371_fu_363_p3 + p_377_fu_370_p3);

assign tmp_10_fu_450_p3 = ((ap_reg_pp0_iter10_tmp_reg_645[0:0] === 1'b1) ? tmp_9_fu_443_p1 : tmp_4_fu_447_p1);

assign tmp_12_fu_434_p4 = {{neg_mul_reg_666[64:37]}};

assign tmp_14_fu_490_p1 = ap_reg_pp0_iter13_p_399_reg_671[27:0];

assign tmp_15_fu_470_p2 = p_399_reg_671 << 32'd4;

assign tmp_16_fu_493_p3 = p_401_reg_683[32'd31];

assign tmp_1_fu_307_p2 = ((p_hw_output_x_scan_s_reg_534 == 11'd1917) ? 1'b1 : 1'b0);

assign tmp_4_fu_447_p1 = $signed(ap_reg_pp0_iter10_tmp_13_reg_661);

assign tmp_9_fu_443_p1 = $signed(tmp_12_fu_434_p4);

assign tmp_last_V_fu_388_p2 = (ap_reg_pp0_iter2_tmp_1_reg_604 & tmp_mid2_fu_358_p3);

assign tmp_mid1_fu_312_p2 = ((p_hw_output_y_scan_2_reg_544 == 11'd1077) ? 1'b1 : 1'b0);

assign tmp_mid2_fu_358_p3 = ((ap_reg_pp0_iter2_exitcond8_reg_528[0:0] === 1'b1) ? tmp_mid1_reg_609 : ap_reg_pp0_iter2_tmp5_reg_549);

assign tmp_s_fu_481_p2 = (p_neg_reg_678 - ap_reg_pp0_iter12_p_399_reg_671);

always @ (posedge ap_clk) begin
    p_neg_reg_678[3:0] <= 4'b0000;
end

endmodule //Loop_1_proc
