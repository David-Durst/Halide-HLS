-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_hw_input_stencil_stream_V_value_V_dout : IN STD_LOGIC_VECTOR (287 downto 0);
    p_hw_input_stencil_stream_V_value_V_empty_n : IN STD_LOGIC;
    p_hw_input_stencil_stream_V_value_V_read : OUT STD_LOGIC;
    hw_output_V_value_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    hw_output_V_value_V_ap_vld : OUT STD_LOGIC;
    hw_output_V_value_V_ap_ack : IN STD_LOGIC;
    hw_output_V_last_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    hw_output_V_last_V_ap_vld : OUT STD_LOGIC;
    hw_output_V_last_V_ap_ack : IN STD_LOGIC );
end;


architecture behav of Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv21_1F8C94 : STD_LOGIC_VECTOR (20 downto 0) := "111111000110010010100";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv11_77E : STD_LOGIC_VECTOR (10 downto 0) := "11101111110";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_435 : STD_LOGIC_VECTOR (10 downto 0) := "10000110101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011100";
    constant ap_const_lv32_BD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111101";
    constant ap_const_lv32_DD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011101";
    constant ap_const_lv32_FD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111101";
    constant ap_const_lv32_11D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011101";
    constant ap_const_lv11_77D : STD_LOGIC_VECTOR (10 downto 0) := "11101111101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv65_1A41A41A5 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000110100100000110100100000110100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFD9 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111011001";
    constant ap_const_lv27_7FFFFFF : STD_LOGIC_VECTOR (26 downto 0) := "111111111111111111111111111";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_hw_input_stencil_stream_V_value_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal hw_output_V_value_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter18_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal hw_output_V_last_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_154 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_hw_output_y_scan_1_reg_165 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_x_scan_2_reg_177 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_flatten_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_sig_ioackin_hw_output_V_value_V_ap_ack : STD_LOGIC;
    signal ap_block_state21_io : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter14_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter15_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter16_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter17_exitcond_flatten_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_194_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_687 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_reg_687 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_reg_687 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_hw_output_x_scan_s_fu_206_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_x_scan_s_reg_693 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_x_scan_1_fu_214_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_y_scan_2_fu_220_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_y_scan_2_reg_703 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_hw_output_y_scan_s_fu_232_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_y_scan_s_reg_713 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_345_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_345_reg_718 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_351_reg_723 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter2_p_351_reg_723 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_357_reg_728 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_363_reg_733 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_369_reg_738 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_375_reg_743 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_381_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_387_reg_753 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter2_p_387_reg_753 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_393_reg_758 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_323_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_17_reg_763 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_reg_768 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_reg_pp0_iter2_tmp_5_reg_768 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_6_reg_773 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_7_reg_778 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_8_reg_783 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_9_reg_788 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_reg_793 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_reg_798 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_reg_pp0_iter2_tmp_4_reg_798 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_10_reg_803 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_1_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid1_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid1_reg_813 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_347_fu_424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_347_reg_818 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_359_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_359_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter3_p_359_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_371_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_371_reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_377_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_377_reg_833 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_383_fu_479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_383_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_395_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_395_reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter3_tmp3_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_524_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_reg_858 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter4_tmp7_reg_858 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_reg_863 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter4_tmp9_reg_863 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_last_V_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_last_V_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_tmp_last_V_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_tmp_last_V_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_tmp_last_V_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_tmp_last_V_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_tmp_last_V_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_tmp_last_V_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_tmp_last_V_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_tmp_last_V_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter14_tmp_last_V_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter15_tmp_last_V_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter16_tmp_last_V_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter17_tmp_last_V_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter18_tmp_last_V_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_397_fu_567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_397_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter6_p_397_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter7_p_397_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter8_p_397_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter9_p_397_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter10_p_397_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter11_p_397_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter12_p_397_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter13_p_397_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter14_p_397_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter15_p_397_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter16_p_397_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter17_p_397_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_tmp_18_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_tmp_18_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_tmp_18_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_tmp_18_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_tmp_18_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_tmp_18_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_583_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_reg_895 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_20_reg_900 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_reg_pp0_iter11_tmp_20_reg_900 : STD_LOGIC_VECTOR (26 downto 0);
    signal neg_mul_fu_599_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal neg_mul_reg_905 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_399_fu_633_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_399_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter13_p_399_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter14_p_399_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter15_p_399_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter16_p_399_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter17_p_399_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter18_p_399_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_640_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_916 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_401_fu_645_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_401_reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal p_hw_output_y_scan_1_phi_fu_169_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal ap_reg_ioackin_hw_output_V_value_V_ap_ack : STD_LOGIC := '0';
    signal ap_reg_ioackin_hw_output_V_last_V_ap_ack : STD_LOGIC := '0';
    signal p_shl_fu_417_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl2_fu_429_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl8_fu_448_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl7_fu_460_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl6_fu_472_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl4_fu_484_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl9_fu_441_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl5_fu_513_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_529_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl1_fu_506_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid2_fu_501_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_fu_563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_583_p0 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_19_fu_604_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_11_fu_613_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_620_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_ti_fu_627_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_640_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_640_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_22_fu_652_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_402_cast_fu_659_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_21_fu_649_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_408_fu_667_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_583_ce : STD_LOGIC;
    signal grp_fu_640_ce : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component hls_target_mul_34fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (33 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component hls_target_mul_7sg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    hls_target_mul_34fYi_U18 : component hls_target_mul_34fYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 34,
        din1_WIDTH => 32,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_583_p0,
        din1 => p_397_reg_878,
        ce => grp_fu_583_ce,
        dout => grp_fu_583_p2);

    hls_target_mul_7sg8j_U19 : component hls_target_mul_7sg8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 7,
        din1_WIDTH => 29,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_640_p0,
        din1 => grp_fu_640_p1,
        ce => grp_fu_640_ce,
        dout => grp_fu_640_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_hw_output_V_last_V_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp0_iter19) and (ap_const_lv1_0 = ap_reg_pp0_iter18_exitcond_flatten_reg_678))) then
                    if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_1 = hw_output_V_last_V_ap_ack))) then 
                        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_hw_output_V_value_V_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp0_iter19) and (ap_const_lv1_0 = ap_reg_pp0_iter18_exitcond_flatten_reg_678))) then
                    if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_1 = hw_output_V_value_V_ap_ack))) then 
                        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_188_p2))) then 
                indvar_flatten_reg_154 <= indvar_flatten_next_fu_194_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                indvar_flatten_reg_154 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    p_hw_output_x_scan_2_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_188_p2))) then 
                p_hw_output_x_scan_2_reg_177 <= p_hw_output_x_scan_1_fu_214_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                p_hw_output_x_scan_2_reg_177 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    p_hw_output_y_scan_1_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_678) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
                p_hw_output_y_scan_1_reg_165 <= p_hw_output_y_scan_s_reg_713;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                p_hw_output_y_scan_1_reg_165 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter10_exitcond_flatten_reg_678 <= ap_reg_pp0_iter9_exitcond_flatten_reg_678;
                ap_reg_pp0_iter10_p_397_reg_878 <= ap_reg_pp0_iter9_p_397_reg_878;
                ap_reg_pp0_iter10_tmp_18_reg_884 <= ap_reg_pp0_iter9_tmp_18_reg_884;
                ap_reg_pp0_iter10_tmp_last_V_reg_868 <= ap_reg_pp0_iter9_tmp_last_V_reg_868;
                ap_reg_pp0_iter11_exitcond_flatten_reg_678 <= ap_reg_pp0_iter10_exitcond_flatten_reg_678;
                ap_reg_pp0_iter11_p_397_reg_878 <= ap_reg_pp0_iter10_p_397_reg_878;
                ap_reg_pp0_iter11_tmp_18_reg_884 <= ap_reg_pp0_iter10_tmp_18_reg_884;
                ap_reg_pp0_iter11_tmp_20_reg_900 <= tmp_20_reg_900;
                ap_reg_pp0_iter11_tmp_last_V_reg_868 <= ap_reg_pp0_iter10_tmp_last_V_reg_868;
                ap_reg_pp0_iter12_exitcond_flatten_reg_678 <= ap_reg_pp0_iter11_exitcond_flatten_reg_678;
                ap_reg_pp0_iter12_p_397_reg_878 <= ap_reg_pp0_iter11_p_397_reg_878;
                ap_reg_pp0_iter12_tmp_last_V_reg_868 <= ap_reg_pp0_iter11_tmp_last_V_reg_868;
                ap_reg_pp0_iter13_exitcond_flatten_reg_678 <= ap_reg_pp0_iter12_exitcond_flatten_reg_678;
                ap_reg_pp0_iter13_p_397_reg_878 <= ap_reg_pp0_iter12_p_397_reg_878;
                ap_reg_pp0_iter13_p_399_reg_910 <= p_399_reg_910;
                ap_reg_pp0_iter13_tmp_last_V_reg_868 <= ap_reg_pp0_iter12_tmp_last_V_reg_868;
                ap_reg_pp0_iter14_exitcond_flatten_reg_678 <= ap_reg_pp0_iter13_exitcond_flatten_reg_678;
                ap_reg_pp0_iter14_p_397_reg_878 <= ap_reg_pp0_iter13_p_397_reg_878;
                ap_reg_pp0_iter14_p_399_reg_910 <= ap_reg_pp0_iter13_p_399_reg_910;
                ap_reg_pp0_iter14_tmp_last_V_reg_868 <= ap_reg_pp0_iter13_tmp_last_V_reg_868;
                ap_reg_pp0_iter15_exitcond_flatten_reg_678 <= ap_reg_pp0_iter14_exitcond_flatten_reg_678;
                ap_reg_pp0_iter15_p_397_reg_878 <= ap_reg_pp0_iter14_p_397_reg_878;
                ap_reg_pp0_iter15_p_399_reg_910 <= ap_reg_pp0_iter14_p_399_reg_910;
                ap_reg_pp0_iter15_tmp_last_V_reg_868 <= ap_reg_pp0_iter14_tmp_last_V_reg_868;
                ap_reg_pp0_iter16_exitcond_flatten_reg_678 <= ap_reg_pp0_iter15_exitcond_flatten_reg_678;
                ap_reg_pp0_iter16_p_397_reg_878 <= ap_reg_pp0_iter15_p_397_reg_878;
                ap_reg_pp0_iter16_p_399_reg_910 <= ap_reg_pp0_iter15_p_399_reg_910;
                ap_reg_pp0_iter16_tmp_last_V_reg_868 <= ap_reg_pp0_iter15_tmp_last_V_reg_868;
                ap_reg_pp0_iter17_exitcond_flatten_reg_678 <= ap_reg_pp0_iter16_exitcond_flatten_reg_678;
                ap_reg_pp0_iter17_p_397_reg_878 <= ap_reg_pp0_iter16_p_397_reg_878;
                ap_reg_pp0_iter17_p_399_reg_910 <= ap_reg_pp0_iter16_p_399_reg_910;
                ap_reg_pp0_iter17_tmp_last_V_reg_868 <= ap_reg_pp0_iter16_tmp_last_V_reg_868;
                ap_reg_pp0_iter18_exitcond_flatten_reg_678 <= ap_reg_pp0_iter17_exitcond_flatten_reg_678;
                ap_reg_pp0_iter18_p_399_reg_910 <= ap_reg_pp0_iter17_p_399_reg_910;
                ap_reg_pp0_iter18_tmp_last_V_reg_868 <= ap_reg_pp0_iter17_tmp_last_V_reg_868;
                ap_reg_pp0_iter2_exitcond_flatten_reg_678 <= ap_reg_pp0_iter1_exitcond_flatten_reg_678;
                ap_reg_pp0_iter2_exitcond_reg_687 <= ap_reg_pp0_iter1_exitcond_reg_687;
                ap_reg_pp0_iter2_p_351_reg_723 <= p_351_reg_723;
                ap_reg_pp0_iter2_p_387_reg_753 <= p_387_reg_753;
                ap_reg_pp0_iter2_tmp_1_reg_808 <= tmp_1_reg_808;
                ap_reg_pp0_iter2_tmp_4_reg_798 <= tmp_4_reg_798;
                ap_reg_pp0_iter2_tmp_5_reg_768 <= tmp_5_reg_768;
                ap_reg_pp0_iter2_tmp_reg_708 <= tmp_reg_708;
                ap_reg_pp0_iter3_exitcond_flatten_reg_678 <= ap_reg_pp0_iter2_exitcond_flatten_reg_678;
                ap_reg_pp0_iter3_p_359_reg_823 <= p_359_reg_823;
                ap_reg_pp0_iter3_tmp3_reg_848 <= tmp3_reg_848;
                ap_reg_pp0_iter4_exitcond_flatten_reg_678 <= ap_reg_pp0_iter3_exitcond_flatten_reg_678;
                ap_reg_pp0_iter4_tmp7_reg_858 <= tmp7_reg_858;
                ap_reg_pp0_iter4_tmp9_reg_863 <= tmp9_reg_863;
                ap_reg_pp0_iter4_tmp_last_V_reg_868 <= tmp_last_V_reg_868;
                ap_reg_pp0_iter5_exitcond_flatten_reg_678 <= ap_reg_pp0_iter4_exitcond_flatten_reg_678;
                ap_reg_pp0_iter5_tmp_last_V_reg_868 <= ap_reg_pp0_iter4_tmp_last_V_reg_868;
                ap_reg_pp0_iter6_exitcond_flatten_reg_678 <= ap_reg_pp0_iter5_exitcond_flatten_reg_678;
                ap_reg_pp0_iter6_p_397_reg_878 <= p_397_reg_878;
                ap_reg_pp0_iter6_tmp_18_reg_884 <= tmp_18_reg_884;
                ap_reg_pp0_iter6_tmp_last_V_reg_868 <= ap_reg_pp0_iter5_tmp_last_V_reg_868;
                ap_reg_pp0_iter7_exitcond_flatten_reg_678 <= ap_reg_pp0_iter6_exitcond_flatten_reg_678;
                ap_reg_pp0_iter7_p_397_reg_878 <= ap_reg_pp0_iter6_p_397_reg_878;
                ap_reg_pp0_iter7_tmp_18_reg_884 <= ap_reg_pp0_iter6_tmp_18_reg_884;
                ap_reg_pp0_iter7_tmp_last_V_reg_868 <= ap_reg_pp0_iter6_tmp_last_V_reg_868;
                ap_reg_pp0_iter8_exitcond_flatten_reg_678 <= ap_reg_pp0_iter7_exitcond_flatten_reg_678;
                ap_reg_pp0_iter8_p_397_reg_878 <= ap_reg_pp0_iter7_p_397_reg_878;
                ap_reg_pp0_iter8_tmp_18_reg_884 <= ap_reg_pp0_iter7_tmp_18_reg_884;
                ap_reg_pp0_iter8_tmp_last_V_reg_868 <= ap_reg_pp0_iter7_tmp_last_V_reg_868;
                ap_reg_pp0_iter9_exitcond_flatten_reg_678 <= ap_reg_pp0_iter8_exitcond_flatten_reg_678;
                ap_reg_pp0_iter9_p_397_reg_878 <= ap_reg_pp0_iter8_p_397_reg_878;
                ap_reg_pp0_iter9_tmp_18_reg_884 <= ap_reg_pp0_iter8_tmp_18_reg_884;
                ap_reg_pp0_iter9_tmp_last_V_reg_868 <= ap_reg_pp0_iter8_tmp_last_V_reg_868;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_678 <= exitcond_flatten_reg_678;
                ap_reg_pp0_iter1_exitcond_reg_687 <= exitcond_reg_687;
                exitcond_flatten_reg_678 <= exitcond_flatten_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_188_p2))) then
                exitcond_reg_687 <= exitcond_fu_200_p2;
                p_hw_output_x_scan_s_reg_693 <= p_hw_output_x_scan_s_fu_206_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter9_exitcond_flatten_reg_678))) then
                mul_reg_895 <= grp_fu_583_p2;
                tmp_20_reg_900 <= grp_fu_583_p2(64 downto 38);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_678) and (ap_const_lv1_1 = ap_reg_pp0_iter10_tmp_18_reg_884))) then
                neg_mul_reg_905 <= neg_mul_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_678 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                p_345_reg_718 <= p_345_fu_239_p1;
                p_351_reg_723 <= p_hw_input_stencil_stream_V_value_V_dout(63 downto 32);
                p_357_reg_728 <= p_hw_input_stencil_stream_V_value_V_dout(95 downto 64);
                p_363_reg_733 <= p_hw_input_stencil_stream_V_value_V_dout(127 downto 96);
                p_369_reg_738 <= p_hw_input_stencil_stream_V_value_V_dout(159 downto 128);
                p_375_reg_743 <= p_hw_input_stencil_stream_V_value_V_dout(191 downto 160);
                p_381_reg_748 <= p_hw_input_stencil_stream_V_value_V_dout(223 downto 192);
                p_387_reg_753 <= p_hw_input_stencil_stream_V_value_V_dout(255 downto 224);
                p_393_reg_758 <= p_hw_input_stencil_stream_V_value_V_dout(287 downto 256);
                p_hw_output_y_scan_2_reg_703 <= p_hw_output_y_scan_2_fu_220_p2;
                tmp_10_reg_803 <= p_hw_input_stencil_stream_V_value_V_dout(285 downto 256);
                tmp_17_reg_763 <= tmp_17_fu_323_p1;
                tmp_1_reg_808 <= tmp_1_fu_407_p2;
                tmp_3_reg_793 <= p_hw_input_stencil_stream_V_value_V_dout(221 downto 192);
                tmp_4_reg_798 <= p_hw_input_stencil_stream_V_value_V_dout(253 downto 224);
                tmp_5_reg_768 <= p_hw_input_stencil_stream_V_value_V_dout(61 downto 32);
                tmp_6_reg_773 <= p_hw_input_stencil_stream_V_value_V_dout(93 downto 64);
                tmp_7_reg_778 <= p_hw_input_stencil_stream_V_value_V_dout(125 downto 96);
                tmp_8_reg_783 <= p_hw_input_stencil_stream_V_value_V_dout(156 downto 128);
                tmp_9_reg_788 <= p_hw_input_stencil_stream_V_value_V_dout(189 downto 160);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_678))) then
                p_347_reg_818 <= p_347_fu_424_p2;
                p_359_reg_823 <= p_359_fu_436_p2;
                p_371_reg_828 <= p_371_fu_455_p2;
                p_377_reg_833 <= p_377_fu_467_p2;
                p_383_reg_838 <= p_383_fu_479_p2;
                p_395_reg_843 <= p_395_fu_491_p2;
                tmp3_reg_848 <= tmp3_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_678))) then
                p_397_reg_878 <= p_397_fu_567_p2;
                tmp_18_reg_884 <= p_397_fu_567_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter11_exitcond_flatten_reg_678))) then
                p_399_reg_910 <= p_399_fu_633_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter17_exitcond_flatten_reg_678))) then
                p_401_reg_921 <= p_401_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_678 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                p_hw_output_y_scan_s_reg_713 <= p_hw_output_y_scan_s_fu_232_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_678))) then
                tmp2_reg_853 <= tmp2_fu_524_p2;
                tmp7_reg_858 <= tmp7_fu_533_p2;
                tmp9_reg_863 <= tmp9_fu_544_p2;
                tmp_last_V_reg_868 <= tmp_last_V_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_678))) then
                tmp5_reg_873 <= tmp5_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_678) and (ap_reg_pp0_iter1_exitcond_reg_687 = ap_const_lv1_1))) then
                tmp_mid1_reg_813 <= tmp_mid1_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_678 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_687))) then
                tmp_reg_708 <= tmp_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter16_exitcond_flatten_reg_678))) then
                tmp_s_reg_916 <= grp_fu_640_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter19, exitcond_flatten_fu_188_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter18)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter19) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_188_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter19) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_188_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state22 <= ap_CS_fsm(2);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_678)
    begin
                ap_block_pp0_stage0_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_678 = ap_const_lv1_0) and (ap_const_logic_0 = p_hw_input_stencil_stream_V_value_V_empty_n));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_678, ap_enable_reg_pp0_iter19, ap_block_state21_io)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_678 = ap_const_lv1_0) and (ap_const_logic_0 = p_hw_input_stencil_stream_V_value_V_empty_n)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter19) and (ap_const_boolean_1 = ap_block_state21_io)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_678, ap_enable_reg_pp0_iter19, ap_block_state21_io)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_678 = ap_const_lv1_0) and (ap_const_logic_0 = p_hw_input_stencil_stream_V_value_V_empty_n)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter19) and (ap_const_boolean_1 = ap_block_state21_io)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_io_assign_proc : process(ap_reg_pp0_iter18_exitcond_flatten_reg_678, ap_sig_ioackin_hw_output_V_value_V_ap_ack)
    begin
                ap_block_state21_io <= ((ap_const_lv1_0 = ap_reg_pp0_iter18_exitcond_flatten_reg_678) and (ap_const_logic_0 = ap_sig_ioackin_hw_output_V_value_V_ap_ack));
    end process;

        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, exitcond_flatten_reg_678)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_flatten_reg_678 = ap_const_lv1_0) and (ap_const_logic_0 = p_hw_input_stencil_stream_V_value_V_empty_n));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_188_p2)
    begin
        if ((exitcond_flatten_fu_188_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12) and (ap_const_logic_0 = ap_enable_reg_pp0_iter13) and (ap_const_logic_0 = ap_enable_reg_pp0_iter14) and (ap_const_logic_0 = ap_enable_reg_pp0_iter15) and (ap_const_logic_0 = ap_enable_reg_pp0_iter16) and (ap_const_logic_0 = ap_enable_reg_pp0_iter17) and (ap_const_logic_0 = ap_enable_reg_pp0_iter18) and (ap_const_logic_0 = ap_enable_reg_pp0_iter19))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_hw_output_V_value_V_ap_ack_assign_proc : process(hw_output_V_value_V_ap_ack, ap_reg_ioackin_hw_output_V_value_V_ap_ack)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_hw_output_V_value_V_ap_ack)) then 
            ap_sig_ioackin_hw_output_V_value_V_ap_ack <= hw_output_V_value_V_ap_ack;
        else 
            ap_sig_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_1;
        end if; 
    end process;

    exitcond_flatten_fu_188_p2 <= "1" when (indvar_flatten_reg_154 = ap_const_lv21_1F8C94) else "0";
    exitcond_fu_200_p2 <= "1" when (p_hw_output_x_scan_2_reg_177 = ap_const_lv11_77E) else "0";

    grp_fu_583_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_583_ce <= ap_const_logic_1;
        else 
            grp_fu_583_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_583_p0 <= ap_const_lv65_1A41A41A5(34 - 1 downto 0);

    grp_fu_640_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_640_ce <= ap_const_logic_1;
        else 
            grp_fu_640_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_640_p0 <= ap_const_lv32_FFFFFFD9(7 - 1 downto 0);
    grp_fu_640_p1 <= p_399_reg_910(29 - 1 downto 0);
    hw_output_V_last_V <= ap_reg_pp0_iter18_tmp_last_V_reg_868;

    hw_output_V_last_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter19, ap_reg_pp0_iter18_exitcond_flatten_reg_678, ap_block_pp0_stage0_flag00001001, ap_reg_ioackin_hw_output_V_last_V_ap_ack)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter19) and (ap_const_lv1_0 = ap_reg_pp0_iter18_exitcond_flatten_reg_678) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_hw_output_V_last_V_ap_ack))) then 
            hw_output_V_last_V_ap_vld <= ap_const_logic_1;
        else 
            hw_output_V_last_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    hw_output_V_last_V_blk_n_assign_proc : process(hw_output_V_last_V_ap_ack, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter19, ap_reg_pp0_iter18_exitcond_flatten_reg_678)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter19) and (ap_const_lv1_0 = ap_reg_pp0_iter18_exitcond_flatten_reg_678))) then 
            hw_output_V_last_V_blk_n <= hw_output_V_last_V_ap_ack;
        else 
            hw_output_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        hw_output_V_value_V <= std_logic_vector(IEEE.numeric_std.resize(signed(p_408_fu_667_p2),32));


    hw_output_V_value_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter19, ap_reg_pp0_iter18_exitcond_flatten_reg_678, ap_block_pp0_stage0_flag00001001, ap_reg_ioackin_hw_output_V_value_V_ap_ack)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter19) and (ap_const_lv1_0 = ap_reg_pp0_iter18_exitcond_flatten_reg_678) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_hw_output_V_value_V_ap_ack))) then 
            hw_output_V_value_V_ap_vld <= ap_const_logic_1;
        else 
            hw_output_V_value_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    hw_output_V_value_V_blk_n_assign_proc : process(hw_output_V_value_V_ap_ack, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter19, ap_reg_pp0_iter18_exitcond_flatten_reg_678)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter19) and (ap_const_lv1_0 = ap_reg_pp0_iter18_exitcond_flatten_reg_678))) then 
            hw_output_V_value_V_blk_n <= hw_output_V_value_V_ap_ack;
        else 
            hw_output_V_value_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    indvar_flatten_next_fu_194_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_154) + unsigned(ap_const_lv21_1));
    neg_mul_fu_599_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_reg_895));
    neg_ti_fu_627_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_13_fu_620_p3));
    p_345_fu_239_p1 <= p_hw_input_stencil_stream_V_value_V_dout(32 - 1 downto 0);
    p_347_fu_424_p2 <= std_logic_vector(unsigned(p_shl_fu_417_p3) - unsigned(p_345_reg_718));
    p_359_fu_436_p2 <= std_logic_vector(unsigned(p_shl2_fu_429_p3) - unsigned(p_357_reg_728));
    p_371_fu_455_p2 <= std_logic_vector(unsigned(p_shl8_fu_448_p3) - unsigned(p_369_reg_738));
    p_377_fu_467_p2 <= std_logic_vector(unsigned(p_shl7_fu_460_p3) - unsigned(p_375_reg_743));
    p_383_fu_479_p2 <= std_logic_vector(unsigned(p_shl6_fu_472_p3) - unsigned(p_381_reg_748));
    p_395_fu_491_p2 <= std_logic_vector(unsigned(p_shl4_fu_484_p3) - unsigned(p_393_reg_758));
    p_397_fu_567_p2 <= std_logic_vector(unsigned(tmp5_reg_873) + unsigned(tmp10_fu_563_p2));
    p_399_fu_633_p3 <= 
        neg_ti_fu_627_p2 when (ap_reg_pp0_iter11_tmp_18_reg_884(0) = '1') else 
        tmp_12_fu_617_p1;
    p_401_fu_645_p2 <= std_logic_vector(unsigned(ap_reg_pp0_iter17_p_397_reg_878) + unsigned(tmp_s_reg_916));
    p_402_cast_fu_659_p3 <= 
        ap_const_lv27_7FFFFFF when (tmp_22_fu_652_p3(0) = '1') else 
        ap_const_lv27_0;
    p_408_fu_667_p2 <= std_logic_vector(unsigned(p_402_cast_fu_659_p3) + unsigned(tmp_21_fu_649_p1));

    p_hw_input_stencil_stream_V_value_V_blk_n_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond_flatten_reg_678)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_678 = ap_const_lv1_0))) then 
            p_hw_input_stencil_stream_V_value_V_blk_n <= p_hw_input_stencil_stream_V_value_V_empty_n;
        else 
            p_hw_input_stencil_stream_V_value_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_hw_input_stencil_stream_V_value_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_678, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_678 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            p_hw_input_stencil_stream_V_value_V_read <= ap_const_logic_1;
        else 
            p_hw_input_stencil_stream_V_value_V_read <= ap_const_logic_0;
        end if; 
    end process;

    p_hw_output_x_scan_1_fu_214_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(p_hw_output_x_scan_s_fu_206_p3));
    p_hw_output_x_scan_s_fu_206_p3 <= 
        ap_const_lv11_0 when (exitcond_fu_200_p2(0) = '1') else 
        p_hw_output_x_scan_2_reg_177;

    p_hw_output_y_scan_1_phi_fu_169_p4_assign_proc : process(ap_block_pp0_stage0_flag00000000, p_hw_output_y_scan_1_reg_165, ap_reg_pp0_iter1_exitcond_flatten_reg_678, p_hw_output_y_scan_s_reg_713, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_678) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            p_hw_output_y_scan_1_phi_fu_169_p4 <= p_hw_output_y_scan_s_reg_713;
        else 
            p_hw_output_y_scan_1_phi_fu_169_p4 <= p_hw_output_y_scan_1_reg_165;
        end if; 
    end process;

    p_hw_output_y_scan_2_fu_220_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(p_hw_output_y_scan_1_phi_fu_169_p4));
    p_hw_output_y_scan_s_fu_232_p3 <= 
        p_hw_output_y_scan_2_fu_220_p2 when (exitcond_reg_687(0) = '1') else 
        p_hw_output_y_scan_1_phi_fu_169_p4;
    p_shl1_fu_506_p3 <= (ap_reg_pp0_iter2_tmp_5_reg_768 & ap_const_lv2_0);
    p_shl2_fu_429_p3 <= (tmp_6_reg_773 & ap_const_lv2_0);
    p_shl4_fu_484_p3 <= (tmp_10_reg_803 & ap_const_lv2_0);
    p_shl5_fu_513_p3 <= (ap_reg_pp0_iter2_tmp_4_reg_798 & ap_const_lv2_0);
    p_shl6_fu_472_p3 <= (tmp_3_reg_793 & ap_const_lv2_0);
    p_shl7_fu_460_p3 <= (tmp_9_reg_788 & ap_const_lv2_0);
    p_shl8_fu_448_p3 <= (tmp_8_reg_783 & ap_const_lv3_0);
    p_shl9_fu_441_p3 <= (tmp_7_reg_778 & ap_const_lv2_0);
    p_shl_fu_417_p3 <= (tmp_17_reg_763 & ap_const_lv2_0);
    tmp10_fu_563_p2 <= std_logic_vector(unsigned(ap_reg_pp0_iter4_tmp7_reg_858) + unsigned(ap_reg_pp0_iter4_tmp9_reg_863));
    tmp1_fu_520_p2 <= std_logic_vector(unsigned(p_371_reg_828) + unsigned(p_383_reg_838));
    tmp2_fu_524_p2 <= std_logic_vector(unsigned(p_377_reg_833) + unsigned(tmp1_fu_520_p2));
    tmp3_fu_496_p2 <= std_logic_vector(unsigned(p_shl9_fu_441_p3) + unsigned(p_363_reg_733));
    tmp4_fu_554_p2 <= std_logic_vector(unsigned(ap_reg_pp0_iter3_p_359_reg_823) + unsigned(ap_reg_pp0_iter3_tmp3_reg_848));
    tmp5_fu_558_p2 <= std_logic_vector(unsigned(tmp2_reg_853) + unsigned(tmp4_fu_554_p2));
    tmp6_fu_529_p2 <= std_logic_vector(unsigned(p_347_reg_818) + unsigned(ap_reg_pp0_iter2_p_387_reg_753));
    tmp7_fu_533_p2 <= std_logic_vector(unsigned(p_shl5_fu_513_p3) + unsigned(tmp6_fu_529_p2));
    tmp8_fu_539_p2 <= std_logic_vector(unsigned(p_395_reg_843) + unsigned(p_shl1_fu_506_p3));
    tmp9_fu_544_p2 <= std_logic_vector(unsigned(ap_reg_pp0_iter2_p_351_reg_723) + unsigned(tmp8_fu_539_p2));
        tmp_11_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_604_p4),32));

        tmp_12_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_reg_pp0_iter11_tmp_20_reg_900),32));

    tmp_13_fu_620_p3 <= 
        tmp_11_fu_613_p1 when (ap_reg_pp0_iter11_tmp_18_reg_884(0) = '1') else 
        tmp_12_fu_617_p1;
    tmp_17_fu_323_p1 <= p_hw_input_stencil_stream_V_value_V_dout(30 - 1 downto 0);
    tmp_19_fu_604_p4 <= neg_mul_reg_905(64 downto 38);
    tmp_1_fu_407_p2 <= "1" when (p_hw_output_x_scan_s_reg_693 = ap_const_lv11_77D) else "0";
    tmp_21_fu_649_p1 <= ap_reg_pp0_iter18_p_399_reg_910(27 - 1 downto 0);
    tmp_22_fu_652_p3 <= p_401_reg_921(31 downto 31);
    tmp_fu_226_p2 <= "1" when (p_hw_output_y_scan_1_phi_fu_169_p4 = ap_const_lv11_435) else "0";
    tmp_last_V_fu_549_p2 <= (ap_reg_pp0_iter2_tmp_1_reg_808 and tmp_mid2_fu_501_p3);
    tmp_mid1_fu_412_p2 <= "1" when (p_hw_output_y_scan_2_reg_703 = ap_const_lv11_435) else "0";
    tmp_mid2_fu_501_p3 <= 
        tmp_mid1_reg_813 when (ap_reg_pp0_iter2_exitcond_reg_687(0) = '1') else 
        ap_reg_pp0_iter2_tmp_reg_708;
end behav;
