// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_hw_input_stencil_stream_V_value_V_dout,
        p_hw_input_stencil_stream_V_value_V_empty_n,
        p_hw_input_stencil_stream_V_value_V_read,
        hw_output_V_value_V,
        hw_output_V_value_V_ap_vld,
        hw_output_V_value_V_ap_ack,
        hw_output_V_last_V,
        hw_output_V_last_V_ap_vld,
        hw_output_V_last_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state22 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [287:0] p_hw_input_stencil_stream_V_value_V_dout;
input   p_hw_input_stencil_stream_V_value_V_empty_n;
output   p_hw_input_stencil_stream_V_value_V_read;
output  [31:0] hw_output_V_value_V;
output   hw_output_V_value_V_ap_vld;
input   hw_output_V_value_V_ap_ack;
output  [0:0] hw_output_V_last_V;
output   hw_output_V_last_V_ap_vld;
input   hw_output_V_last_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_hw_input_stencil_stream_V_value_V_read;
reg hw_output_V_value_V_ap_vld;
reg hw_output_V_last_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_hw_input_stencil_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_678;
reg    hw_output_V_value_V_blk_n;
reg    ap_enable_reg_pp0_iter19;
reg   [0:0] ap_reg_pp0_iter18_exitcond_flatten_reg_678;
reg    hw_output_V_last_V_blk_n;
reg   [20:0] indvar_flatten_reg_154;
reg   [10:0] p_hw_output_y_scan_1_reg_165;
reg   [10:0] p_hw_output_x_scan_2_reg_177;
wire   [0:0] exitcond_flatten_fu_188_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
reg    ap_sig_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_block_state21_io;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_678;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_678;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_678;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_678;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten_reg_678;
reg   [0:0] ap_reg_pp0_iter6_exitcond_flatten_reg_678;
reg   [0:0] ap_reg_pp0_iter7_exitcond_flatten_reg_678;
reg   [0:0] ap_reg_pp0_iter8_exitcond_flatten_reg_678;
reg   [0:0] ap_reg_pp0_iter9_exitcond_flatten_reg_678;
reg   [0:0] ap_reg_pp0_iter10_exitcond_flatten_reg_678;
reg   [0:0] ap_reg_pp0_iter11_exitcond_flatten_reg_678;
reg   [0:0] ap_reg_pp0_iter12_exitcond_flatten_reg_678;
reg   [0:0] ap_reg_pp0_iter13_exitcond_flatten_reg_678;
reg   [0:0] ap_reg_pp0_iter14_exitcond_flatten_reg_678;
reg   [0:0] ap_reg_pp0_iter15_exitcond_flatten_reg_678;
reg   [0:0] ap_reg_pp0_iter16_exitcond_flatten_reg_678;
reg   [0:0] ap_reg_pp0_iter17_exitcond_flatten_reg_678;
wire   [20:0] indvar_flatten_next_fu_194_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond_fu_200_p2;
reg   [0:0] exitcond_reg_687;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_687;
reg   [0:0] ap_reg_pp0_iter2_exitcond_reg_687;
wire   [10:0] p_hw_output_x_scan_s_fu_206_p3;
reg   [10:0] p_hw_output_x_scan_s_reg_693;
wire   [10:0] p_hw_output_x_scan_1_fu_214_p2;
wire   [10:0] p_hw_output_y_scan_2_fu_220_p2;
reg   [10:0] p_hw_output_y_scan_2_reg_703;
wire   [0:0] tmp_fu_226_p2;
reg   [0:0] tmp_reg_708;
reg   [0:0] ap_reg_pp0_iter2_tmp_reg_708;
wire   [10:0] p_hw_output_y_scan_s_fu_232_p3;
reg   [10:0] p_hw_output_y_scan_s_reg_713;
wire   [31:0] p_345_fu_239_p1;
reg   [31:0] p_345_reg_718;
reg   [31:0] p_351_reg_723;
reg   [31:0] ap_reg_pp0_iter2_p_351_reg_723;
reg   [31:0] p_357_reg_728;
reg   [31:0] p_363_reg_733;
reg   [31:0] p_369_reg_738;
reg   [31:0] p_375_reg_743;
reg   [31:0] p_381_reg_748;
reg   [31:0] p_387_reg_753;
reg   [31:0] ap_reg_pp0_iter2_p_387_reg_753;
reg   [31:0] p_393_reg_758;
wire   [29:0] tmp_17_fu_323_p1;
reg   [29:0] tmp_17_reg_763;
reg   [29:0] tmp_5_reg_768;
reg   [29:0] ap_reg_pp0_iter2_tmp_5_reg_768;
reg   [29:0] tmp_6_reg_773;
reg   [29:0] tmp_7_reg_778;
reg   [28:0] tmp_8_reg_783;
reg   [29:0] tmp_9_reg_788;
reg   [29:0] tmp_3_reg_793;
reg   [29:0] tmp_4_reg_798;
reg   [29:0] ap_reg_pp0_iter2_tmp_4_reg_798;
reg   [29:0] tmp_10_reg_803;
wire   [0:0] tmp_1_fu_407_p2;
reg   [0:0] tmp_1_reg_808;
reg   [0:0] ap_reg_pp0_iter2_tmp_1_reg_808;
wire   [0:0] tmp_mid1_fu_412_p2;
reg   [0:0] tmp_mid1_reg_813;
wire   [31:0] p_347_fu_424_p2;
reg   [31:0] p_347_reg_818;
wire   [31:0] p_359_fu_436_p2;
reg   [31:0] p_359_reg_823;
reg   [31:0] ap_reg_pp0_iter3_p_359_reg_823;
wire   [31:0] p_371_fu_455_p2;
reg   [31:0] p_371_reg_828;
wire   [31:0] p_377_fu_467_p2;
reg   [31:0] p_377_reg_833;
wire   [31:0] p_383_fu_479_p2;
reg   [31:0] p_383_reg_838;
wire   [31:0] p_395_fu_491_p2;
reg   [31:0] p_395_reg_843;
wire   [31:0] tmp3_fu_496_p2;
reg   [31:0] tmp3_reg_848;
reg   [31:0] ap_reg_pp0_iter3_tmp3_reg_848;
wire   [31:0] tmp2_fu_524_p2;
reg   [31:0] tmp2_reg_853;
wire   [31:0] tmp7_fu_533_p2;
reg   [31:0] tmp7_reg_858;
reg   [31:0] ap_reg_pp0_iter4_tmp7_reg_858;
wire   [31:0] tmp9_fu_544_p2;
reg   [31:0] tmp9_reg_863;
reg   [31:0] ap_reg_pp0_iter4_tmp9_reg_863;
wire   [0:0] tmp_last_V_fu_549_p2;
reg   [0:0] tmp_last_V_reg_868;
reg   [0:0] ap_reg_pp0_iter4_tmp_last_V_reg_868;
reg   [0:0] ap_reg_pp0_iter5_tmp_last_V_reg_868;
reg   [0:0] ap_reg_pp0_iter6_tmp_last_V_reg_868;
reg   [0:0] ap_reg_pp0_iter7_tmp_last_V_reg_868;
reg   [0:0] ap_reg_pp0_iter8_tmp_last_V_reg_868;
reg   [0:0] ap_reg_pp0_iter9_tmp_last_V_reg_868;
reg   [0:0] ap_reg_pp0_iter10_tmp_last_V_reg_868;
reg   [0:0] ap_reg_pp0_iter11_tmp_last_V_reg_868;
reg   [0:0] ap_reg_pp0_iter12_tmp_last_V_reg_868;
reg   [0:0] ap_reg_pp0_iter13_tmp_last_V_reg_868;
reg   [0:0] ap_reg_pp0_iter14_tmp_last_V_reg_868;
reg   [0:0] ap_reg_pp0_iter15_tmp_last_V_reg_868;
reg   [0:0] ap_reg_pp0_iter16_tmp_last_V_reg_868;
reg   [0:0] ap_reg_pp0_iter17_tmp_last_V_reg_868;
reg   [0:0] ap_reg_pp0_iter18_tmp_last_V_reg_868;
wire   [31:0] tmp5_fu_558_p2;
reg   [31:0] tmp5_reg_873;
wire   [31:0] p_397_fu_567_p2;
reg  signed [31:0] p_397_reg_878;
reg   [31:0] ap_reg_pp0_iter6_p_397_reg_878;
reg   [31:0] ap_reg_pp0_iter7_p_397_reg_878;
reg   [31:0] ap_reg_pp0_iter8_p_397_reg_878;
reg   [31:0] ap_reg_pp0_iter9_p_397_reg_878;
reg   [31:0] ap_reg_pp0_iter10_p_397_reg_878;
reg   [31:0] ap_reg_pp0_iter11_p_397_reg_878;
reg   [31:0] ap_reg_pp0_iter12_p_397_reg_878;
reg   [31:0] ap_reg_pp0_iter13_p_397_reg_878;
reg   [31:0] ap_reg_pp0_iter14_p_397_reg_878;
reg   [31:0] ap_reg_pp0_iter15_p_397_reg_878;
reg   [31:0] ap_reg_pp0_iter16_p_397_reg_878;
reg   [31:0] ap_reg_pp0_iter17_p_397_reg_878;
reg   [0:0] tmp_18_reg_884;
reg   [0:0] ap_reg_pp0_iter6_tmp_18_reg_884;
reg   [0:0] ap_reg_pp0_iter7_tmp_18_reg_884;
reg   [0:0] ap_reg_pp0_iter8_tmp_18_reg_884;
reg   [0:0] ap_reg_pp0_iter9_tmp_18_reg_884;
reg   [0:0] ap_reg_pp0_iter10_tmp_18_reg_884;
reg   [0:0] ap_reg_pp0_iter11_tmp_18_reg_884;
wire   [64:0] grp_fu_583_p2;
reg   [64:0] mul_reg_895;
reg   [26:0] tmp_20_reg_900;
reg   [26:0] ap_reg_pp0_iter11_tmp_20_reg_900;
wire   [64:0] neg_mul_fu_599_p2;
reg   [64:0] neg_mul_reg_905;
wire  signed [31:0] p_399_fu_633_p3;
reg  signed [31:0] p_399_reg_910;
reg  signed [31:0] ap_reg_pp0_iter13_p_399_reg_910;
reg  signed [31:0] ap_reg_pp0_iter14_p_399_reg_910;
reg  signed [31:0] ap_reg_pp0_iter15_p_399_reg_910;
reg  signed [31:0] ap_reg_pp0_iter16_p_399_reg_910;
reg  signed [31:0] ap_reg_pp0_iter17_p_399_reg_910;
reg  signed [31:0] ap_reg_pp0_iter18_p_399_reg_910;
wire   [31:0] grp_fu_640_p2;
reg   [31:0] tmp_s_reg_916;
wire   [31:0] p_401_fu_645_p2;
reg   [31:0] p_401_reg_921;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg   [10:0] p_hw_output_y_scan_1_phi_fu_169_p4;
reg    ap_block_pp0_stage0_flag00001001;
reg    ap_reg_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_reg_ioackin_hw_output_V_last_V_ap_ack;
wire   [31:0] p_shl_fu_417_p3;
wire   [31:0] p_shl2_fu_429_p3;
wire   [31:0] p_shl8_fu_448_p3;
wire   [31:0] p_shl7_fu_460_p3;
wire   [31:0] p_shl6_fu_472_p3;
wire   [31:0] p_shl4_fu_484_p3;
wire   [31:0] p_shl9_fu_441_p3;
wire   [31:0] tmp1_fu_520_p2;
wire   [31:0] p_shl5_fu_513_p3;
wire   [31:0] tmp6_fu_529_p2;
wire   [31:0] p_shl1_fu_506_p3;
wire   [31:0] tmp8_fu_539_p2;
wire   [0:0] tmp_mid2_fu_501_p3;
wire   [31:0] tmp4_fu_554_p2;
wire   [31:0] tmp10_fu_563_p2;
wire   [33:0] grp_fu_583_p0;
wire   [26:0] tmp_19_fu_604_p4;
wire  signed [31:0] tmp_11_fu_613_p1;
wire  signed [31:0] tmp_12_fu_617_p1;
wire   [31:0] tmp_13_fu_620_p3;
wire   [31:0] neg_ti_fu_627_p2;
wire  signed [6:0] grp_fu_640_p0;
wire  signed [28:0] grp_fu_640_p1;
wire   [0:0] tmp_22_fu_652_p3;
wire   [26:0] p_402_cast_fu_659_p3;
wire   [26:0] tmp_21_fu_649_p1;
wire   [26:0] p_408_fu_667_p2;
reg    grp_fu_583_ce;
reg    grp_fu_640_ce;
wire    ap_CS_fsm_state22;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_reg_ioackin_hw_output_V_value_V_ap_ack = 1'b0;
#0 ap_reg_ioackin_hw_output_V_last_V_ap_ack = 1'b0;
end

hls_target_mul_34fYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 34 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 65 ))
hls_target_mul_34fYi_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_583_p0),
    .din1(p_397_reg_878),
    .ce(grp_fu_583_ce),
    .dout(grp_fu_583_p2)
);

hls_target_mul_7sg8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 32 ))
hls_target_mul_7sg8j_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_640_p0),
    .din1(grp_fu_640_p1),
    .ce(grp_fu_640_ce),
    .dout(grp_fu_640_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter19 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter19) & (1'd0 == ap_reg_pp0_iter18_exitcond_flatten_reg_678))) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == hw_output_V_last_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter19) & (1'd0 == ap_reg_pp0_iter18_exitcond_flatten_reg_678))) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == hw_output_V_value_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_188_p2))) begin
        indvar_flatten_reg_154 <= indvar_flatten_next_fu_194_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_154 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_188_p2))) begin
        p_hw_output_x_scan_2_reg_177 <= p_hw_output_x_scan_1_fu_214_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        p_hw_output_x_scan_2_reg_177 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_678) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        p_hw_output_y_scan_1_reg_165 <= p_hw_output_y_scan_s_reg_713;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        p_hw_output_y_scan_1_reg_165 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter10_exitcond_flatten_reg_678 <= ap_reg_pp0_iter9_exitcond_flatten_reg_678;
        ap_reg_pp0_iter10_p_397_reg_878 <= ap_reg_pp0_iter9_p_397_reg_878;
        ap_reg_pp0_iter10_tmp_18_reg_884 <= ap_reg_pp0_iter9_tmp_18_reg_884;
        ap_reg_pp0_iter10_tmp_last_V_reg_868 <= ap_reg_pp0_iter9_tmp_last_V_reg_868;
        ap_reg_pp0_iter11_exitcond_flatten_reg_678 <= ap_reg_pp0_iter10_exitcond_flatten_reg_678;
        ap_reg_pp0_iter11_p_397_reg_878 <= ap_reg_pp0_iter10_p_397_reg_878;
        ap_reg_pp0_iter11_tmp_18_reg_884 <= ap_reg_pp0_iter10_tmp_18_reg_884;
        ap_reg_pp0_iter11_tmp_20_reg_900 <= tmp_20_reg_900;
        ap_reg_pp0_iter11_tmp_last_V_reg_868 <= ap_reg_pp0_iter10_tmp_last_V_reg_868;
        ap_reg_pp0_iter12_exitcond_flatten_reg_678 <= ap_reg_pp0_iter11_exitcond_flatten_reg_678;
        ap_reg_pp0_iter12_p_397_reg_878 <= ap_reg_pp0_iter11_p_397_reg_878;
        ap_reg_pp0_iter12_tmp_last_V_reg_868 <= ap_reg_pp0_iter11_tmp_last_V_reg_868;
        ap_reg_pp0_iter13_exitcond_flatten_reg_678 <= ap_reg_pp0_iter12_exitcond_flatten_reg_678;
        ap_reg_pp0_iter13_p_397_reg_878 <= ap_reg_pp0_iter12_p_397_reg_878;
        ap_reg_pp0_iter13_p_399_reg_910 <= p_399_reg_910;
        ap_reg_pp0_iter13_tmp_last_V_reg_868 <= ap_reg_pp0_iter12_tmp_last_V_reg_868;
        ap_reg_pp0_iter14_exitcond_flatten_reg_678 <= ap_reg_pp0_iter13_exitcond_flatten_reg_678;
        ap_reg_pp0_iter14_p_397_reg_878 <= ap_reg_pp0_iter13_p_397_reg_878;
        ap_reg_pp0_iter14_p_399_reg_910 <= ap_reg_pp0_iter13_p_399_reg_910;
        ap_reg_pp0_iter14_tmp_last_V_reg_868 <= ap_reg_pp0_iter13_tmp_last_V_reg_868;
        ap_reg_pp0_iter15_exitcond_flatten_reg_678 <= ap_reg_pp0_iter14_exitcond_flatten_reg_678;
        ap_reg_pp0_iter15_p_397_reg_878 <= ap_reg_pp0_iter14_p_397_reg_878;
        ap_reg_pp0_iter15_p_399_reg_910 <= ap_reg_pp0_iter14_p_399_reg_910;
        ap_reg_pp0_iter15_tmp_last_V_reg_868 <= ap_reg_pp0_iter14_tmp_last_V_reg_868;
        ap_reg_pp0_iter16_exitcond_flatten_reg_678 <= ap_reg_pp0_iter15_exitcond_flatten_reg_678;
        ap_reg_pp0_iter16_p_397_reg_878 <= ap_reg_pp0_iter15_p_397_reg_878;
        ap_reg_pp0_iter16_p_399_reg_910 <= ap_reg_pp0_iter15_p_399_reg_910;
        ap_reg_pp0_iter16_tmp_last_V_reg_868 <= ap_reg_pp0_iter15_tmp_last_V_reg_868;
        ap_reg_pp0_iter17_exitcond_flatten_reg_678 <= ap_reg_pp0_iter16_exitcond_flatten_reg_678;
        ap_reg_pp0_iter17_p_397_reg_878 <= ap_reg_pp0_iter16_p_397_reg_878;
        ap_reg_pp0_iter17_p_399_reg_910 <= ap_reg_pp0_iter16_p_399_reg_910;
        ap_reg_pp0_iter17_tmp_last_V_reg_868 <= ap_reg_pp0_iter16_tmp_last_V_reg_868;
        ap_reg_pp0_iter18_exitcond_flatten_reg_678 <= ap_reg_pp0_iter17_exitcond_flatten_reg_678;
        ap_reg_pp0_iter18_p_399_reg_910 <= ap_reg_pp0_iter17_p_399_reg_910;
        ap_reg_pp0_iter18_tmp_last_V_reg_868 <= ap_reg_pp0_iter17_tmp_last_V_reg_868;
        ap_reg_pp0_iter2_exitcond_flatten_reg_678 <= ap_reg_pp0_iter1_exitcond_flatten_reg_678;
        ap_reg_pp0_iter2_exitcond_reg_687 <= ap_reg_pp0_iter1_exitcond_reg_687;
        ap_reg_pp0_iter2_p_351_reg_723 <= p_351_reg_723;
        ap_reg_pp0_iter2_p_387_reg_753 <= p_387_reg_753;
        ap_reg_pp0_iter2_tmp_1_reg_808 <= tmp_1_reg_808;
        ap_reg_pp0_iter2_tmp_4_reg_798 <= tmp_4_reg_798;
        ap_reg_pp0_iter2_tmp_5_reg_768 <= tmp_5_reg_768;
        ap_reg_pp0_iter2_tmp_reg_708 <= tmp_reg_708;
        ap_reg_pp0_iter3_exitcond_flatten_reg_678 <= ap_reg_pp0_iter2_exitcond_flatten_reg_678;
        ap_reg_pp0_iter3_p_359_reg_823 <= p_359_reg_823;
        ap_reg_pp0_iter3_tmp3_reg_848 <= tmp3_reg_848;
        ap_reg_pp0_iter4_exitcond_flatten_reg_678 <= ap_reg_pp0_iter3_exitcond_flatten_reg_678;
        ap_reg_pp0_iter4_tmp7_reg_858 <= tmp7_reg_858;
        ap_reg_pp0_iter4_tmp9_reg_863 <= tmp9_reg_863;
        ap_reg_pp0_iter4_tmp_last_V_reg_868 <= tmp_last_V_reg_868;
        ap_reg_pp0_iter5_exitcond_flatten_reg_678 <= ap_reg_pp0_iter4_exitcond_flatten_reg_678;
        ap_reg_pp0_iter5_tmp_last_V_reg_868 <= ap_reg_pp0_iter4_tmp_last_V_reg_868;
        ap_reg_pp0_iter6_exitcond_flatten_reg_678 <= ap_reg_pp0_iter5_exitcond_flatten_reg_678;
        ap_reg_pp0_iter6_p_397_reg_878 <= p_397_reg_878;
        ap_reg_pp0_iter6_tmp_18_reg_884 <= tmp_18_reg_884;
        ap_reg_pp0_iter6_tmp_last_V_reg_868 <= ap_reg_pp0_iter5_tmp_last_V_reg_868;
        ap_reg_pp0_iter7_exitcond_flatten_reg_678 <= ap_reg_pp0_iter6_exitcond_flatten_reg_678;
        ap_reg_pp0_iter7_p_397_reg_878 <= ap_reg_pp0_iter6_p_397_reg_878;
        ap_reg_pp0_iter7_tmp_18_reg_884 <= ap_reg_pp0_iter6_tmp_18_reg_884;
        ap_reg_pp0_iter7_tmp_last_V_reg_868 <= ap_reg_pp0_iter6_tmp_last_V_reg_868;
        ap_reg_pp0_iter8_exitcond_flatten_reg_678 <= ap_reg_pp0_iter7_exitcond_flatten_reg_678;
        ap_reg_pp0_iter8_p_397_reg_878 <= ap_reg_pp0_iter7_p_397_reg_878;
        ap_reg_pp0_iter8_tmp_18_reg_884 <= ap_reg_pp0_iter7_tmp_18_reg_884;
        ap_reg_pp0_iter8_tmp_last_V_reg_868 <= ap_reg_pp0_iter7_tmp_last_V_reg_868;
        ap_reg_pp0_iter9_exitcond_flatten_reg_678 <= ap_reg_pp0_iter8_exitcond_flatten_reg_678;
        ap_reg_pp0_iter9_p_397_reg_878 <= ap_reg_pp0_iter8_p_397_reg_878;
        ap_reg_pp0_iter9_tmp_18_reg_884 <= ap_reg_pp0_iter8_tmp_18_reg_884;
        ap_reg_pp0_iter9_tmp_last_V_reg_868 <= ap_reg_pp0_iter8_tmp_last_V_reg_868;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_678 <= exitcond_flatten_reg_678;
        ap_reg_pp0_iter1_exitcond_reg_687 <= exitcond_reg_687;
        exitcond_flatten_reg_678 <= exitcond_flatten_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_188_p2))) begin
        exitcond_reg_687 <= exitcond_fu_200_p2;
        p_hw_output_x_scan_s_reg_693 <= p_hw_output_x_scan_s_fu_206_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter9_exitcond_flatten_reg_678))) begin
        mul_reg_895 <= grp_fu_583_p2;
        tmp_20_reg_900 <= {{grp_fu_583_p2[64:38]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter10_exitcond_flatten_reg_678) & (1'd1 == ap_reg_pp0_iter10_tmp_18_reg_884))) begin
        neg_mul_reg_905 <= neg_mul_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_678 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_345_reg_718 <= p_345_fu_239_p1;
        p_351_reg_723 <= {{p_hw_input_stencil_stream_V_value_V_dout[63:32]}};
        p_357_reg_728 <= {{p_hw_input_stencil_stream_V_value_V_dout[95:64]}};
        p_363_reg_733 <= {{p_hw_input_stencil_stream_V_value_V_dout[127:96]}};
        p_369_reg_738 <= {{p_hw_input_stencil_stream_V_value_V_dout[159:128]}};
        p_375_reg_743 <= {{p_hw_input_stencil_stream_V_value_V_dout[191:160]}};
        p_381_reg_748 <= {{p_hw_input_stencil_stream_V_value_V_dout[223:192]}};
        p_387_reg_753 <= {{p_hw_input_stencil_stream_V_value_V_dout[255:224]}};
        p_393_reg_758 <= {{p_hw_input_stencil_stream_V_value_V_dout[287:256]}};
        p_hw_output_y_scan_2_reg_703 <= p_hw_output_y_scan_2_fu_220_p2;
        tmp_10_reg_803 <= {{p_hw_input_stencil_stream_V_value_V_dout[285:256]}};
        tmp_17_reg_763 <= tmp_17_fu_323_p1;
        tmp_1_reg_808 <= tmp_1_fu_407_p2;
        tmp_3_reg_793 <= {{p_hw_input_stencil_stream_V_value_V_dout[221:192]}};
        tmp_4_reg_798 <= {{p_hw_input_stencil_stream_V_value_V_dout[253:224]}};
        tmp_5_reg_768 <= {{p_hw_input_stencil_stream_V_value_V_dout[61:32]}};
        tmp_6_reg_773 <= {{p_hw_input_stencil_stream_V_value_V_dout[93:64]}};
        tmp_7_reg_778 <= {{p_hw_input_stencil_stream_V_value_V_dout[125:96]}};
        tmp_8_reg_783 <= {{p_hw_input_stencil_stream_V_value_V_dout[156:128]}};
        tmp_9_reg_788 <= {{p_hw_input_stencil_stream_V_value_V_dout[189:160]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_678))) begin
        p_347_reg_818 <= p_347_fu_424_p2;
        p_359_reg_823 <= p_359_fu_436_p2;
        p_371_reg_828 <= p_371_fu_455_p2;
        p_377_reg_833 <= p_377_fu_467_p2;
        p_383_reg_838 <= p_383_fu_479_p2;
        p_395_reg_843 <= p_395_fu_491_p2;
        tmp3_reg_848 <= tmp3_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_678))) begin
        p_397_reg_878 <= p_397_fu_567_p2;
        tmp_18_reg_884 <= p_397_fu_567_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter11_exitcond_flatten_reg_678))) begin
        p_399_reg_910 <= p_399_fu_633_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter17_exitcond_flatten_reg_678))) begin
        p_401_reg_921 <= p_401_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_678 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_output_y_scan_s_reg_713 <= p_hw_output_y_scan_s_fu_232_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_678))) begin
        tmp2_reg_853 <= tmp2_fu_524_p2;
        tmp7_reg_858 <= tmp7_fu_533_p2;
        tmp9_reg_863 <= tmp9_fu_544_p2;
        tmp_last_V_reg_868 <= tmp_last_V_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_678))) begin
        tmp5_reg_873 <= tmp5_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_678) & (ap_reg_pp0_iter1_exitcond_reg_687 == 1'd1))) begin
        tmp_mid1_reg_813 <= tmp_mid1_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_678 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_687))) begin
        tmp_reg_708 <= tmp_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter16_exitcond_flatten_reg_678))) begin
        tmp_s_reg_916 <= grp_fu_640_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_188_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_enable_reg_pp0_iter10) & (1'b0 == ap_enable_reg_pp0_iter11) & (1'b0 == ap_enable_reg_pp0_iter12) & (1'b0 == ap_enable_reg_pp0_iter13) & (1'b0 == ap_enable_reg_pp0_iter14) & (1'b0 == ap_enable_reg_pp0_iter15) & (1'b0 == ap_enable_reg_pp0_iter16) & (1'b0 == ap_enable_reg_pp0_iter17) & (1'b0 == ap_enable_reg_pp0_iter18) & (1'b0 == ap_enable_reg_pp0_iter19))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack)) begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = hw_output_V_value_V_ap_ack;
    end else begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        grp_fu_583_ce = 1'b1;
    end else begin
        grp_fu_583_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        grp_fu_640_ce = 1'b1;
    end else begin
        grp_fu_640_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter19) & (1'd0 == ap_reg_pp0_iter18_exitcond_flatten_reg_678) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_hw_output_V_last_V_ap_ack))) begin
        hw_output_V_last_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_last_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter19) & (1'd0 == ap_reg_pp0_iter18_exitcond_flatten_reg_678))) begin
        hw_output_V_last_V_blk_n = hw_output_V_last_V_ap_ack;
    end else begin
        hw_output_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter19) & (1'd0 == ap_reg_pp0_iter18_exitcond_flatten_reg_678) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack))) begin
        hw_output_V_value_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_value_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter19) & (1'd0 == ap_reg_pp0_iter18_exitcond_flatten_reg_678))) begin
        hw_output_V_value_V_blk_n = hw_output_V_value_V_ap_ack;
    end else begin
        hw_output_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_678 == 1'd0))) begin
        p_hw_input_stencil_stream_V_value_V_blk_n = p_hw_input_stencil_stream_V_value_V_empty_n;
    end else begin
        p_hw_input_stencil_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_678 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_input_stencil_stream_V_value_V_read = 1'b1;
    end else begin
        p_hw_input_stencil_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_678) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        p_hw_output_y_scan_1_phi_fu_169_p4 = p_hw_output_y_scan_s_reg_713;
    end else begin
        p_hw_output_y_scan_1_phi_fu_169_p4 = p_hw_output_y_scan_1_reg_165;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter19) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_188_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter19) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_188_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_678 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_678 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter19) & (1'b1 == ap_block_state21_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_678 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter19) & (1'b1 == ap_block_state21_io)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_io = ((1'd0 == ap_reg_pp0_iter18_exitcond_flatten_reg_678) & (1'b0 == ap_sig_ioackin_hw_output_V_value_V_ap_ack));
end

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten_reg_678 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten_fu_188_p2 = ((indvar_flatten_reg_154 == 21'd2067604) ? 1'b1 : 1'b0);

assign exitcond_fu_200_p2 = ((p_hw_output_x_scan_2_reg_177 == 11'd1918) ? 1'b1 : 1'b0);

assign grp_fu_583_p0 = 65'd7048151461;

assign grp_fu_640_p0 = 32'd4294967257;

assign grp_fu_640_p1 = p_399_reg_910;

assign hw_output_V_last_V = ap_reg_pp0_iter18_tmp_last_V_reg_868;

assign hw_output_V_value_V = $signed(p_408_fu_667_p2);

assign indvar_flatten_next_fu_194_p2 = (indvar_flatten_reg_154 + 21'd1);

assign neg_mul_fu_599_p2 = (65'd0 - mul_reg_895);

assign neg_ti_fu_627_p2 = (32'd0 - tmp_13_fu_620_p3);

assign p_345_fu_239_p1 = p_hw_input_stencil_stream_V_value_V_dout[31:0];

assign p_347_fu_424_p2 = (p_shl_fu_417_p3 - p_345_reg_718);

assign p_359_fu_436_p2 = (p_shl2_fu_429_p3 - p_357_reg_728);

assign p_371_fu_455_p2 = (p_shl8_fu_448_p3 - p_369_reg_738);

assign p_377_fu_467_p2 = (p_shl7_fu_460_p3 - p_375_reg_743);

assign p_383_fu_479_p2 = (p_shl6_fu_472_p3 - p_381_reg_748);

assign p_395_fu_491_p2 = (p_shl4_fu_484_p3 - p_393_reg_758);

assign p_397_fu_567_p2 = (tmp5_reg_873 + tmp10_fu_563_p2);

assign p_399_fu_633_p3 = ((ap_reg_pp0_iter11_tmp_18_reg_884[0:0] === 1'b1) ? neg_ti_fu_627_p2 : tmp_12_fu_617_p1);

assign p_401_fu_645_p2 = (ap_reg_pp0_iter17_p_397_reg_878 + tmp_s_reg_916);

assign p_402_cast_fu_659_p3 = ((tmp_22_fu_652_p3[0:0] === 1'b1) ? 27'd134217727 : 27'd0);

assign p_408_fu_667_p2 = (p_402_cast_fu_659_p3 + tmp_21_fu_649_p1);

assign p_hw_output_x_scan_1_fu_214_p2 = (11'd1 + p_hw_output_x_scan_s_fu_206_p3);

assign p_hw_output_x_scan_s_fu_206_p3 = ((exitcond_fu_200_p2[0:0] === 1'b1) ? 11'd0 : p_hw_output_x_scan_2_reg_177);

assign p_hw_output_y_scan_2_fu_220_p2 = (11'd1 + p_hw_output_y_scan_1_phi_fu_169_p4);

assign p_hw_output_y_scan_s_fu_232_p3 = ((exitcond_reg_687[0:0] === 1'b1) ? p_hw_output_y_scan_2_fu_220_p2 : p_hw_output_y_scan_1_phi_fu_169_p4);

assign p_shl1_fu_506_p3 = {{ap_reg_pp0_iter2_tmp_5_reg_768}, {2'd0}};

assign p_shl2_fu_429_p3 = {{tmp_6_reg_773}, {2'd0}};

assign p_shl4_fu_484_p3 = {{tmp_10_reg_803}, {2'd0}};

assign p_shl5_fu_513_p3 = {{ap_reg_pp0_iter2_tmp_4_reg_798}, {2'd0}};

assign p_shl6_fu_472_p3 = {{tmp_3_reg_793}, {2'd0}};

assign p_shl7_fu_460_p3 = {{tmp_9_reg_788}, {2'd0}};

assign p_shl8_fu_448_p3 = {{tmp_8_reg_783}, {3'd0}};

assign p_shl9_fu_441_p3 = {{tmp_7_reg_778}, {2'd0}};

assign p_shl_fu_417_p3 = {{tmp_17_reg_763}, {2'd0}};

assign tmp10_fu_563_p2 = (ap_reg_pp0_iter4_tmp7_reg_858 + ap_reg_pp0_iter4_tmp9_reg_863);

assign tmp1_fu_520_p2 = (p_371_reg_828 + p_383_reg_838);

assign tmp2_fu_524_p2 = (p_377_reg_833 + tmp1_fu_520_p2);

assign tmp3_fu_496_p2 = (p_shl9_fu_441_p3 + p_363_reg_733);

assign tmp4_fu_554_p2 = (ap_reg_pp0_iter3_p_359_reg_823 + ap_reg_pp0_iter3_tmp3_reg_848);

assign tmp5_fu_558_p2 = (tmp2_reg_853 + tmp4_fu_554_p2);

assign tmp6_fu_529_p2 = (p_347_reg_818 + ap_reg_pp0_iter2_p_387_reg_753);

assign tmp7_fu_533_p2 = (p_shl5_fu_513_p3 + tmp6_fu_529_p2);

assign tmp8_fu_539_p2 = (p_395_reg_843 + p_shl1_fu_506_p3);

assign tmp9_fu_544_p2 = (ap_reg_pp0_iter2_p_351_reg_723 + tmp8_fu_539_p2);

assign tmp_11_fu_613_p1 = $signed(tmp_19_fu_604_p4);

assign tmp_12_fu_617_p1 = $signed(ap_reg_pp0_iter11_tmp_20_reg_900);

assign tmp_13_fu_620_p3 = ((ap_reg_pp0_iter11_tmp_18_reg_884[0:0] === 1'b1) ? tmp_11_fu_613_p1 : tmp_12_fu_617_p1);

assign tmp_17_fu_323_p1 = p_hw_input_stencil_stream_V_value_V_dout[29:0];

assign tmp_19_fu_604_p4 = {{neg_mul_reg_905[64:38]}};

assign tmp_1_fu_407_p2 = ((p_hw_output_x_scan_s_reg_693 == 11'd1917) ? 1'b1 : 1'b0);

assign tmp_21_fu_649_p1 = ap_reg_pp0_iter18_p_399_reg_910[26:0];

assign tmp_22_fu_652_p3 = p_401_reg_921[32'd31];

assign tmp_fu_226_p2 = ((p_hw_output_y_scan_1_phi_fu_169_p4 == 11'd1077) ? 1'b1 : 1'b0);

assign tmp_last_V_fu_549_p2 = (ap_reg_pp0_iter2_tmp_1_reg_808 & tmp_mid2_fu_501_p3);

assign tmp_mid1_fu_412_p2 = ((p_hw_output_y_scan_2_reg_703 == 11'd1077) ? 1'b1 : 1'b0);

assign tmp_mid2_fu_501_p3 = ((ap_reg_pp0_iter2_exitcond_reg_687[0:0] === 1'b1) ? tmp_mid1_reg_813 : ap_reg_pp0_iter2_tmp_reg_708);

endmodule //Loop_1_proc
